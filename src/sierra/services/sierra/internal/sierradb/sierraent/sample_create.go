// Code generated by ent, DO NOT EDIT.

package sierraent

import (
	"context"
	"errors"
	"fmt"
	"sierra/services/sierra/internal/sierradb/sierraent/sample"
	"sierra/services/sierra/internal/sierradb/sierraent/sourcesample"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SampleCreate is the builder for creating a Sample entity.
type SampleCreate struct {
	config
	mutation *SampleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFormat sets the "format" field.
func (sc *SampleCreate) SetFormat(s string) *SampleCreate {
	sc.mutation.SetFormat(s)
	return sc
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (sc *SampleCreate) SetNillableFormat(s *string) *SampleCreate {
	if s != nil {
		sc.SetFormat(*s)
	}
	return sc
}

// SetLength sets the "length" field.
func (sc *SampleCreate) SetLength(i int64) *SampleCreate {
	sc.mutation.SetLength(i)
	return sc
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (sc *SampleCreate) SetNillableLength(i *int64) *SampleCreate {
	if i != nil {
		sc.SetLength(*i)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *SampleCreate) SetID(s string) *SampleCreate {
	sc.mutation.SetID(s)
	return sc
}

// AddSourceIDs adds the "source" edge to the SourceSample entity by IDs.
func (sc *SampleCreate) AddSourceIDs(ids ...string) *SampleCreate {
	sc.mutation.AddSourceIDs(ids...)
	return sc
}

// AddSource adds the "source" edges to the SourceSample entity.
func (sc *SampleCreate) AddSource(s ...*SourceSample) *SampleCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSourceIDs(ids...)
}

// Mutation returns the SampleMutation object of the builder.
func (sc *SampleCreate) Mutation() *SampleMutation {
	return sc.mutation
}

// Save creates the Sample in the database.
func (sc *SampleCreate) Save(ctx context.Context) (*Sample, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SampleCreate) SaveX(ctx context.Context) *Sample {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SampleCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SampleCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SampleCreate) check() error {
	return nil
}

func (sc *SampleCreate) sqlSave(ctx context.Context) (*Sample, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Sample.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SampleCreate) createSpec() (*Sample, *sqlgraph.CreateSpec) {
	var (
		_node = &Sample{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sample.Table, sqlgraph.NewFieldSpec(sample.FieldID, field.TypeString))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Format(); ok {
		_spec.SetField(sample.FieldFormat, field.TypeString, value)
		_node.Format = value
	}
	if value, ok := sc.mutation.Length(); ok {
		_spec.SetField(sample.FieldLength, field.TypeInt64, value)
		_node.Length = value
	}
	if nodes := sc.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   sample.SourceTable,
			Columns: []string{sample.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcesample.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Sample.Create().
//		SetFormat(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SampleUpsert) {
//			SetFormat(v+v).
//		}).
//		Exec(ctx)
func (sc *SampleCreate) OnConflict(opts ...sql.ConflictOption) *SampleUpsertOne {
	sc.conflict = opts
	return &SampleUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Sample.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SampleCreate) OnConflictColumns(columns ...string) *SampleUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SampleUpsertOne{
		create: sc,
	}
}

type (
	// SampleUpsertOne is the builder for "upsert"-ing
	//  one Sample node.
	SampleUpsertOne struct {
		create *SampleCreate
	}

	// SampleUpsert is the "OnConflict" setter.
	SampleUpsert struct {
		*sql.UpdateSet
	}
)

// SetFormat sets the "format" field.
func (u *SampleUpsert) SetFormat(v string) *SampleUpsert {
	u.Set(sample.FieldFormat, v)
	return u
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *SampleUpsert) UpdateFormat() *SampleUpsert {
	u.SetExcluded(sample.FieldFormat)
	return u
}

// ClearFormat clears the value of the "format" field.
func (u *SampleUpsert) ClearFormat() *SampleUpsert {
	u.SetNull(sample.FieldFormat)
	return u
}

// SetLength sets the "length" field.
func (u *SampleUpsert) SetLength(v int64) *SampleUpsert {
	u.Set(sample.FieldLength, v)
	return u
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *SampleUpsert) UpdateLength() *SampleUpsert {
	u.SetExcluded(sample.FieldLength)
	return u
}

// AddLength adds v to the "length" field.
func (u *SampleUpsert) AddLength(v int64) *SampleUpsert {
	u.Add(sample.FieldLength, v)
	return u
}

// ClearLength clears the value of the "length" field.
func (u *SampleUpsert) ClearLength() *SampleUpsert {
	u.SetNull(sample.FieldLength)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Sample.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sample.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SampleUpsertOne) UpdateNewValues() *SampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sample.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Sample.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SampleUpsertOne) Ignore() *SampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SampleUpsertOne) DoNothing() *SampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SampleCreate.OnConflict
// documentation for more info.
func (u *SampleUpsertOne) Update(set func(*SampleUpsert)) *SampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SampleUpsert{UpdateSet: update})
	}))
	return u
}

// SetFormat sets the "format" field.
func (u *SampleUpsertOne) SetFormat(v string) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateFormat() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateFormat()
	})
}

// ClearFormat clears the value of the "format" field.
func (u *SampleUpsertOne) ClearFormat() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearFormat()
	})
}

// SetLength sets the "length" field.
func (u *SampleUpsertOne) SetLength(v int64) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *SampleUpsertOne) AddLength(v int64) *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *SampleUpsertOne) UpdateLength() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateLength()
	})
}

// ClearLength clears the value of the "length" field.
func (u *SampleUpsertOne) ClearLength() *SampleUpsertOne {
	return u.Update(func(s *SampleUpsert) {
		s.ClearLength()
	})
}

// Exec executes the query.
func (u *SampleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("sierraent: missing options for SampleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SampleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SampleUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("sierraent: SampleUpsertOne.ID is not supported by MySQL driver. Use SampleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SampleUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SampleCreateBulk is the builder for creating many Sample entities in bulk.
type SampleCreateBulk struct {
	config
	err      error
	builders []*SampleCreate
	conflict []sql.ConflictOption
}

// Save creates the Sample entities in the database.
func (scb *SampleCreateBulk) Save(ctx context.Context) ([]*Sample, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sample, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SampleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SampleCreateBulk) SaveX(ctx context.Context) []*Sample {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SampleCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SampleCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Sample.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SampleUpsert) {
//			SetFormat(v+v).
//		}).
//		Exec(ctx)
func (scb *SampleCreateBulk) OnConflict(opts ...sql.ConflictOption) *SampleUpsertBulk {
	scb.conflict = opts
	return &SampleUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Sample.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SampleCreateBulk) OnConflictColumns(columns ...string) *SampleUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SampleUpsertBulk{
		create: scb,
	}
}

// SampleUpsertBulk is the builder for "upsert"-ing
// a bulk of Sample nodes.
type SampleUpsertBulk struct {
	create *SampleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Sample.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sample.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SampleUpsertBulk) UpdateNewValues() *SampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sample.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Sample.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SampleUpsertBulk) Ignore() *SampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SampleUpsertBulk) DoNothing() *SampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SampleCreateBulk.OnConflict
// documentation for more info.
func (u *SampleUpsertBulk) Update(set func(*SampleUpsert)) *SampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SampleUpsert{UpdateSet: update})
	}))
	return u
}

// SetFormat sets the "format" field.
func (u *SampleUpsertBulk) SetFormat(v string) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateFormat() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateFormat()
	})
}

// ClearFormat clears the value of the "format" field.
func (u *SampleUpsertBulk) ClearFormat() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearFormat()
	})
}

// SetLength sets the "length" field.
func (u *SampleUpsertBulk) SetLength(v int64) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *SampleUpsertBulk) AddLength(v int64) *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *SampleUpsertBulk) UpdateLength() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.UpdateLength()
	})
}

// ClearLength clears the value of the "length" field.
func (u *SampleUpsertBulk) ClearLength() *SampleUpsertBulk {
	return u.Update(func(s *SampleUpsert) {
		s.ClearLength()
	})
}

// Exec executes the query.
func (u *SampleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("sierraent: OnConflict was set for builder %d. Set it on the SampleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("sierraent: missing options for SampleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SampleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
