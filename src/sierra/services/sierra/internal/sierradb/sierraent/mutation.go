// Code generated by ent, DO NOT EDIT.

package sierraent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/predicate"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/sample"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/source"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/sourcesample"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSample       = "Sample"
	TypeSource       = "Source"
	TypeSourceSample = "SourceSample"
)

// SampleMutation represents an operation that mutates the Sample nodes in the graph.
type SampleMutation struct {
	config
	op            Op
	typ           string
	id            *string
	format        *string
	duration      *int64
	addduration   *int64
	clearedFields map[string]struct{}
	source        map[string]struct{}
	removedsource map[string]struct{}
	clearedsource bool
	done          bool
	oldValue      func(context.Context) (*Sample, error)
	predicates    []predicate.Sample
}

var _ ent.Mutation = (*SampleMutation)(nil)

// sampleOption allows management of the mutation configuration using functional options.
type sampleOption func(*SampleMutation)

// newSampleMutation creates new mutation for the Sample entity.
func newSampleMutation(c config, op Op, opts ...sampleOption) *SampleMutation {
	m := &SampleMutation{
		config:        c,
		op:            op,
		typ:           TypeSample,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSampleID sets the ID field of the mutation.
func withSampleID(id string) sampleOption {
	return func(m *SampleMutation) {
		var (
			err   error
			once  sync.Once
			value *Sample
		)
		m.oldValue = func(ctx context.Context) (*Sample, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Sample.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSample sets the old Sample of the mutation.
func withSample(node *Sample) sampleOption {
	return func(m *SampleMutation) {
		m.oldValue = func(context.Context) (*Sample, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SampleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SampleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("sierraent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Sample entities.
func (m *SampleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SampleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SampleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Sample.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFormat sets the "format" field.
func (m *SampleMutation) SetFormat(s string) {
	m.format = &s
}

// Format returns the value of the "format" field in the mutation.
func (m *SampleMutation) Format() (r string, exists bool) {
	v := m.format
	if v == nil {
		return
	}
	return *v, true
}

// OldFormat returns the old "format" field's value of the Sample entity.
// If the Sample object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SampleMutation) OldFormat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormat: %w", err)
	}
	return oldValue.Format, nil
}

// ClearFormat clears the value of the "format" field.
func (m *SampleMutation) ClearFormat() {
	m.format = nil
	m.clearedFields[sample.FieldFormat] = struct{}{}
}

// FormatCleared returns if the "format" field was cleared in this mutation.
func (m *SampleMutation) FormatCleared() bool {
	_, ok := m.clearedFields[sample.FieldFormat]
	return ok
}

// ResetFormat resets all changes to the "format" field.
func (m *SampleMutation) ResetFormat() {
	m.format = nil
	delete(m.clearedFields, sample.FieldFormat)
}

// SetDuration sets the "duration" field.
func (m *SampleMutation) SetDuration(i int64) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *SampleMutation) Duration() (r int64, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Sample entity.
// If the Sample object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SampleMutation) OldDuration(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *SampleMutation) AddDuration(i int64) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *SampleMutation) AddedDuration() (r int64, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ClearDuration clears the value of the "duration" field.
func (m *SampleMutation) ClearDuration() {
	m.duration = nil
	m.addduration = nil
	m.clearedFields[sample.FieldDuration] = struct{}{}
}

// DurationCleared returns if the "duration" field was cleared in this mutation.
func (m *SampleMutation) DurationCleared() bool {
	_, ok := m.clearedFields[sample.FieldDuration]
	return ok
}

// ResetDuration resets all changes to the "duration" field.
func (m *SampleMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
	delete(m.clearedFields, sample.FieldDuration)
}

// AddSourceIDs adds the "source" edge to the SourceSample entity by ids.
func (m *SampleMutation) AddSourceIDs(ids ...string) {
	if m.source == nil {
		m.source = make(map[string]struct{})
	}
	for i := range ids {
		m.source[ids[i]] = struct{}{}
	}
}

// ClearSource clears the "source" edge to the SourceSample entity.
func (m *SampleMutation) ClearSource() {
	m.clearedsource = true
}

// SourceCleared reports if the "source" edge to the SourceSample entity was cleared.
func (m *SampleMutation) SourceCleared() bool {
	return m.clearedsource
}

// RemoveSourceIDs removes the "source" edge to the SourceSample entity by IDs.
func (m *SampleMutation) RemoveSourceIDs(ids ...string) {
	if m.removedsource == nil {
		m.removedsource = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.source, ids[i])
		m.removedsource[ids[i]] = struct{}{}
	}
}

// RemovedSource returns the removed IDs of the "source" edge to the SourceSample entity.
func (m *SampleMutation) RemovedSourceIDs() (ids []string) {
	for id := range m.removedsource {
		ids = append(ids, id)
	}
	return
}

// SourceIDs returns the "source" edge IDs in the mutation.
func (m *SampleMutation) SourceIDs() (ids []string) {
	for id := range m.source {
		ids = append(ids, id)
	}
	return
}

// ResetSource resets all changes to the "source" edge.
func (m *SampleMutation) ResetSource() {
	m.source = nil
	m.clearedsource = false
	m.removedsource = nil
}

// Where appends a list predicates to the SampleMutation builder.
func (m *SampleMutation) Where(ps ...predicate.Sample) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SampleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SampleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Sample, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SampleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SampleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Sample).
func (m *SampleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SampleMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.format != nil {
		fields = append(fields, sample.FieldFormat)
	}
	if m.duration != nil {
		fields = append(fields, sample.FieldDuration)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SampleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sample.FieldFormat:
		return m.Format()
	case sample.FieldDuration:
		return m.Duration()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SampleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sample.FieldFormat:
		return m.OldFormat(ctx)
	case sample.FieldDuration:
		return m.OldDuration(ctx)
	}
	return nil, fmt.Errorf("unknown Sample field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SampleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sample.FieldFormat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormat(v)
		return nil
	case sample.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Sample field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SampleMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, sample.FieldDuration)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SampleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case sample.FieldDuration:
		return m.AddedDuration()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SampleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case sample.FieldDuration:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	}
	return fmt.Errorf("unknown Sample numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SampleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(sample.FieldFormat) {
		fields = append(fields, sample.FieldFormat)
	}
	if m.FieldCleared(sample.FieldDuration) {
		fields = append(fields, sample.FieldDuration)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SampleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SampleMutation) ClearField(name string) error {
	switch name {
	case sample.FieldFormat:
		m.ClearFormat()
		return nil
	case sample.FieldDuration:
		m.ClearDuration()
		return nil
	}
	return fmt.Errorf("unknown Sample nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SampleMutation) ResetField(name string) error {
	switch name {
	case sample.FieldFormat:
		m.ResetFormat()
		return nil
	case sample.FieldDuration:
		m.ResetDuration()
		return nil
	}
	return fmt.Errorf("unknown Sample field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SampleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.source != nil {
		edges = append(edges, sample.EdgeSource)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SampleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sample.EdgeSource:
		ids := make([]ent.Value, 0, len(m.source))
		for id := range m.source {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SampleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsource != nil {
		edges = append(edges, sample.EdgeSource)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SampleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case sample.EdgeSource:
		ids := make([]ent.Value, 0, len(m.removedsource))
		for id := range m.removedsource {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SampleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsource {
		edges = append(edges, sample.EdgeSource)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SampleMutation) EdgeCleared(name string) bool {
	switch name {
	case sample.EdgeSource:
		return m.clearedsource
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SampleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Sample unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SampleMutation) ResetEdge(name string) error {
	switch name {
	case sample.EdgeSource:
		m.ResetSource()
		return nil
	}
	return fmt.Errorf("unknown Sample edge %s", name)
}

// SourceMutation represents an operation that mutates the Source nodes in the graph.
type SourceMutation struct {
	config
	op            Op
	typ           string
	id            *string
	create_time   *time.Time
	clearedFields map[string]struct{}
	sample        map[string]struct{}
	removedsample map[string]struct{}
	clearedsample bool
	done          bool
	oldValue      func(context.Context) (*Source, error)
	predicates    []predicate.Source
}

var _ ent.Mutation = (*SourceMutation)(nil)

// sourceOption allows management of the mutation configuration using functional options.
type sourceOption func(*SourceMutation)

// newSourceMutation creates new mutation for the Source entity.
func newSourceMutation(c config, op Op, opts ...sourceOption) *SourceMutation {
	m := &SourceMutation{
		config:        c,
		op:            op,
		typ:           TypeSource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSourceID sets the ID field of the mutation.
func withSourceID(id string) sourceOption {
	return func(m *SourceMutation) {
		var (
			err   error
			once  sync.Once
			value *Source
		)
		m.oldValue = func(ctx context.Context) (*Source, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Source.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSource sets the old Source of the mutation.
func withSource(node *Source) sourceOption {
	return func(m *SourceMutation) {
		m.oldValue = func(context.Context) (*Source, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("sierraent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Source entities.
func (m *SourceMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SourceMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SourceMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Source.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *SourceMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SourceMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Source entity.
// If the Source object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SourceMutation) ResetCreateTime() {
	m.create_time = nil
}

// AddSampleIDs adds the "sample" edge to the SourceSample entity by ids.
func (m *SourceMutation) AddSampleIDs(ids ...string) {
	if m.sample == nil {
		m.sample = make(map[string]struct{})
	}
	for i := range ids {
		m.sample[ids[i]] = struct{}{}
	}
}

// ClearSample clears the "sample" edge to the SourceSample entity.
func (m *SourceMutation) ClearSample() {
	m.clearedsample = true
}

// SampleCleared reports if the "sample" edge to the SourceSample entity was cleared.
func (m *SourceMutation) SampleCleared() bool {
	return m.clearedsample
}

// RemoveSampleIDs removes the "sample" edge to the SourceSample entity by IDs.
func (m *SourceMutation) RemoveSampleIDs(ids ...string) {
	if m.removedsample == nil {
		m.removedsample = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.sample, ids[i])
		m.removedsample[ids[i]] = struct{}{}
	}
}

// RemovedSample returns the removed IDs of the "sample" edge to the SourceSample entity.
func (m *SourceMutation) RemovedSampleIDs() (ids []string) {
	for id := range m.removedsample {
		ids = append(ids, id)
	}
	return
}

// SampleIDs returns the "sample" edge IDs in the mutation.
func (m *SourceMutation) SampleIDs() (ids []string) {
	for id := range m.sample {
		ids = append(ids, id)
	}
	return
}

// ResetSample resets all changes to the "sample" edge.
func (m *SourceMutation) ResetSample() {
	m.sample = nil
	m.clearedsample = false
	m.removedsample = nil
}

// Where appends a list predicates to the SourceMutation builder.
func (m *SourceMutation) Where(ps ...predicate.Source) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SourceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SourceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Source, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SourceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SourceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Source).
func (m *SourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SourceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.create_time != nil {
		fields = append(fields, source.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case source.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case source.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Source field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case source.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Source field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Source numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SourceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SourceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Source nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SourceMutation) ResetField(name string) error {
	switch name {
	case source.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown Source field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.sample != nil {
		edges = append(edges, source.EdgeSample)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case source.EdgeSample:
		ids := make([]ent.Value, 0, len(m.sample))
		for id := range m.sample {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsample != nil {
		edges = append(edges, source.EdgeSample)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SourceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case source.EdgeSample:
		ids := make([]ent.Value, 0, len(m.removedsample))
		for id := range m.removedsample {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsample {
		edges = append(edges, source.EdgeSample)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SourceMutation) EdgeCleared(name string) bool {
	switch name {
	case source.EdgeSample:
		return m.clearedsample
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SourceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Source unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SourceMutation) ResetEdge(name string) error {
	switch name {
	case source.EdgeSample:
		m.ResetSample()
		return nil
	}
	return fmt.Errorf("unknown Source edge %s", name)
}

// SourceSampleMutation represents an operation that mutates the SourceSample nodes in the graph.
type SourceSampleMutation struct {
	config
	op            Op
	typ           string
	id            *string
	relative_path *string
	clearedFields map[string]struct{}
	source        *string
	clearedsource bool
	sample        *string
	clearedsample bool
	done          bool
	oldValue      func(context.Context) (*SourceSample, error)
	predicates    []predicate.SourceSample
}

var _ ent.Mutation = (*SourceSampleMutation)(nil)

// sourcesampleOption allows management of the mutation configuration using functional options.
type sourcesampleOption func(*SourceSampleMutation)

// newSourceSampleMutation creates new mutation for the SourceSample entity.
func newSourceSampleMutation(c config, op Op, opts ...sourcesampleOption) *SourceSampleMutation {
	m := &SourceSampleMutation{
		config:        c,
		op:            op,
		typ:           TypeSourceSample,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSourceSampleID sets the ID field of the mutation.
func withSourceSampleID(id string) sourcesampleOption {
	return func(m *SourceSampleMutation) {
		var (
			err   error
			once  sync.Once
			value *SourceSample
		)
		m.oldValue = func(ctx context.Context) (*SourceSample, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SourceSample.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSourceSample sets the old SourceSample of the mutation.
func withSourceSample(node *SourceSample) sourcesampleOption {
	return func(m *SourceSampleMutation) {
		m.oldValue = func(context.Context) (*SourceSample, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SourceSampleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SourceSampleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("sierraent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SourceSample entities.
func (m *SourceSampleMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SourceSampleMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SourceSampleMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SourceSample.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRelativePath sets the "relative_path" field.
func (m *SourceSampleMutation) SetRelativePath(s string) {
	m.relative_path = &s
}

// RelativePath returns the value of the "relative_path" field in the mutation.
func (m *SourceSampleMutation) RelativePath() (r string, exists bool) {
	v := m.relative_path
	if v == nil {
		return
	}
	return *v, true
}

// OldRelativePath returns the old "relative_path" field's value of the SourceSample entity.
// If the SourceSample object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SourceSampleMutation) OldRelativePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRelativePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRelativePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRelativePath: %w", err)
	}
	return oldValue.RelativePath, nil
}

// ResetRelativePath resets all changes to the "relative_path" field.
func (m *SourceSampleMutation) ResetRelativePath() {
	m.relative_path = nil
}

// SetSourceID sets the "source" edge to the Source entity by id.
func (m *SourceSampleMutation) SetSourceID(id string) {
	m.source = &id
}

// ClearSource clears the "source" edge to the Source entity.
func (m *SourceSampleMutation) ClearSource() {
	m.clearedsource = true
}

// SourceCleared reports if the "source" edge to the Source entity was cleared.
func (m *SourceSampleMutation) SourceCleared() bool {
	return m.clearedsource
}

// SourceID returns the "source" edge ID in the mutation.
func (m *SourceSampleMutation) SourceID() (id string, exists bool) {
	if m.source != nil {
		return *m.source, true
	}
	return
}

// SourceIDs returns the "source" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SourceID instead. It exists only for internal usage by the builders.
func (m *SourceSampleMutation) SourceIDs() (ids []string) {
	if id := m.source; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSource resets all changes to the "source" edge.
func (m *SourceSampleMutation) ResetSource() {
	m.source = nil
	m.clearedsource = false
}

// SetSampleID sets the "sample" edge to the Sample entity by id.
func (m *SourceSampleMutation) SetSampleID(id string) {
	m.sample = &id
}

// ClearSample clears the "sample" edge to the Sample entity.
func (m *SourceSampleMutation) ClearSample() {
	m.clearedsample = true
}

// SampleCleared reports if the "sample" edge to the Sample entity was cleared.
func (m *SourceSampleMutation) SampleCleared() bool {
	return m.clearedsample
}

// SampleID returns the "sample" edge ID in the mutation.
func (m *SourceSampleMutation) SampleID() (id string, exists bool) {
	if m.sample != nil {
		return *m.sample, true
	}
	return
}

// SampleIDs returns the "sample" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SampleID instead. It exists only for internal usage by the builders.
func (m *SourceSampleMutation) SampleIDs() (ids []string) {
	if id := m.sample; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSample resets all changes to the "sample" edge.
func (m *SourceSampleMutation) ResetSample() {
	m.sample = nil
	m.clearedsample = false
}

// Where appends a list predicates to the SourceSampleMutation builder.
func (m *SourceSampleMutation) Where(ps ...predicate.SourceSample) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SourceSampleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SourceSampleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SourceSample, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SourceSampleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SourceSampleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SourceSample).
func (m *SourceSampleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SourceSampleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.relative_path != nil {
		fields = append(fields, sourcesample.FieldRelativePath)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SourceSampleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case sourcesample.FieldRelativePath:
		return m.RelativePath()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SourceSampleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case sourcesample.FieldRelativePath:
		return m.OldRelativePath(ctx)
	}
	return nil, fmt.Errorf("unknown SourceSample field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SourceSampleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case sourcesample.FieldRelativePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRelativePath(v)
		return nil
	}
	return fmt.Errorf("unknown SourceSample field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SourceSampleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SourceSampleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SourceSampleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SourceSample numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SourceSampleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SourceSampleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SourceSampleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SourceSample nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SourceSampleMutation) ResetField(name string) error {
	switch name {
	case sourcesample.FieldRelativePath:
		m.ResetRelativePath()
		return nil
	}
	return fmt.Errorf("unknown SourceSample field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SourceSampleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.source != nil {
		edges = append(edges, sourcesample.EdgeSource)
	}
	if m.sample != nil {
		edges = append(edges, sourcesample.EdgeSample)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SourceSampleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case sourcesample.EdgeSource:
		if id := m.source; id != nil {
			return []ent.Value{*id}
		}
	case sourcesample.EdgeSample:
		if id := m.sample; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SourceSampleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SourceSampleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SourceSampleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsource {
		edges = append(edges, sourcesample.EdgeSource)
	}
	if m.clearedsample {
		edges = append(edges, sourcesample.EdgeSample)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SourceSampleMutation) EdgeCleared(name string) bool {
	switch name {
	case sourcesample.EdgeSource:
		return m.clearedsource
	case sourcesample.EdgeSample:
		return m.clearedsample
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SourceSampleMutation) ClearEdge(name string) error {
	switch name {
	case sourcesample.EdgeSource:
		m.ClearSource()
		return nil
	case sourcesample.EdgeSample:
		m.ClearSample()
		return nil
	}
	return fmt.Errorf("unknown SourceSample unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SourceSampleMutation) ResetEdge(name string) error {
	switch name {
	case sourcesample.EdgeSource:
		m.ResetSource()
		return nil
	case sourcesample.EdgeSample:
		m.ResetSample()
		return nil
	}
	return fmt.Errorf("unknown SourceSample edge %s", name)
}
