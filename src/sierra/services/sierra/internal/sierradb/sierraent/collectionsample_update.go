// Code generated by ent, DO NOT EDIT.

package sierraent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/collection"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/collectionsample"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/predicate"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/sourcesample"
)

// CollectionSampleUpdate is the builder for updating CollectionSample entities.
type CollectionSampleUpdate struct {
	config
	hooks    []Hook
	mutation *CollectionSampleMutation
}

// Where appends a list predicates to the CollectionSampleUpdate builder.
func (csu *CollectionSampleUpdate) Where(ps ...predicate.CollectionSample) *CollectionSampleUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// SetSampleID sets the "sample_id" field.
func (csu *CollectionSampleUpdate) SetSampleID(s string) *CollectionSampleUpdate {
	csu.mutation.SetSampleID(s)
	return csu
}

// SetNillableSampleID sets the "sample_id" field if the given value is not nil.
func (csu *CollectionSampleUpdate) SetNillableSampleID(s *string) *CollectionSampleUpdate {
	if s != nil {
		csu.SetSampleID(*s)
	}
	return csu
}

// SetCollectionID sets the "collection_id" field.
func (csu *CollectionSampleUpdate) SetCollectionID(u uuid.UUID) *CollectionSampleUpdate {
	csu.mutation.SetCollectionID(u)
	return csu
}

// SetNillableCollectionID sets the "collection_id" field if the given value is not nil.
func (csu *CollectionSampleUpdate) SetNillableCollectionID(u *uuid.UUID) *CollectionSampleUpdate {
	if u != nil {
		csu.SetCollectionID(*u)
	}
	return csu
}

// SetSample sets the "sample" edge to the SourceSample entity.
func (csu *CollectionSampleUpdate) SetSample(s *SourceSample) *CollectionSampleUpdate {
	return csu.SetSampleID(s.ID)
}

// SetCollection sets the "collection" edge to the Collection entity.
func (csu *CollectionSampleUpdate) SetCollection(c *Collection) *CollectionSampleUpdate {
	return csu.SetCollectionID(c.ID)
}

// Mutation returns the CollectionSampleMutation object of the builder.
func (csu *CollectionSampleUpdate) Mutation() *CollectionSampleMutation {
	return csu.mutation
}

// ClearSample clears the "sample" edge to the SourceSample entity.
func (csu *CollectionSampleUpdate) ClearSample() *CollectionSampleUpdate {
	csu.mutation.ClearSample()
	return csu
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (csu *CollectionSampleUpdate) ClearCollection() *CollectionSampleUpdate {
	csu.mutation.ClearCollection()
	return csu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CollectionSampleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CollectionSampleUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CollectionSampleUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CollectionSampleUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csu *CollectionSampleUpdate) check() error {
	if _, ok := csu.mutation.SampleID(); csu.mutation.SampleCleared() && !ok {
		return errors.New(`sierraent: clearing a required unique edge "CollectionSample.sample"`)
	}
	if _, ok := csu.mutation.CollectionID(); csu.mutation.CollectionCleared() && !ok {
		return errors.New(`sierraent: clearing a required unique edge "CollectionSample.collection"`)
	}
	return nil
}

func (csu *CollectionSampleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := csu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(collectionsample.Table, collectionsample.Columns, sqlgraph.NewFieldSpec(collectionsample.FieldID, field.TypeInt))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if csu.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionsample.SampleTable,
			Columns: []string{collectionsample.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcesample.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionsample.SampleTable,
			Columns: []string{collectionsample.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcesample.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csu.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionsample.CollectionTable,
			Columns: []string{collectionsample.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionsample.CollectionTable,
			Columns: []string{collectionsample.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collectionsample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CollectionSampleUpdateOne is the builder for updating a single CollectionSample entity.
type CollectionSampleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CollectionSampleMutation
}

// SetSampleID sets the "sample_id" field.
func (csuo *CollectionSampleUpdateOne) SetSampleID(s string) *CollectionSampleUpdateOne {
	csuo.mutation.SetSampleID(s)
	return csuo
}

// SetNillableSampleID sets the "sample_id" field if the given value is not nil.
func (csuo *CollectionSampleUpdateOne) SetNillableSampleID(s *string) *CollectionSampleUpdateOne {
	if s != nil {
		csuo.SetSampleID(*s)
	}
	return csuo
}

// SetCollectionID sets the "collection_id" field.
func (csuo *CollectionSampleUpdateOne) SetCollectionID(u uuid.UUID) *CollectionSampleUpdateOne {
	csuo.mutation.SetCollectionID(u)
	return csuo
}

// SetNillableCollectionID sets the "collection_id" field if the given value is not nil.
func (csuo *CollectionSampleUpdateOne) SetNillableCollectionID(u *uuid.UUID) *CollectionSampleUpdateOne {
	if u != nil {
		csuo.SetCollectionID(*u)
	}
	return csuo
}

// SetSample sets the "sample" edge to the SourceSample entity.
func (csuo *CollectionSampleUpdateOne) SetSample(s *SourceSample) *CollectionSampleUpdateOne {
	return csuo.SetSampleID(s.ID)
}

// SetCollection sets the "collection" edge to the Collection entity.
func (csuo *CollectionSampleUpdateOne) SetCollection(c *Collection) *CollectionSampleUpdateOne {
	return csuo.SetCollectionID(c.ID)
}

// Mutation returns the CollectionSampleMutation object of the builder.
func (csuo *CollectionSampleUpdateOne) Mutation() *CollectionSampleMutation {
	return csuo.mutation
}

// ClearSample clears the "sample" edge to the SourceSample entity.
func (csuo *CollectionSampleUpdateOne) ClearSample() *CollectionSampleUpdateOne {
	csuo.mutation.ClearSample()
	return csuo
}

// ClearCollection clears the "collection" edge to the Collection entity.
func (csuo *CollectionSampleUpdateOne) ClearCollection() *CollectionSampleUpdateOne {
	csuo.mutation.ClearCollection()
	return csuo
}

// Where appends a list predicates to the CollectionSampleUpdate builder.
func (csuo *CollectionSampleUpdateOne) Where(ps ...predicate.CollectionSample) *CollectionSampleUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CollectionSampleUpdateOne) Select(field string, fields ...string) *CollectionSampleUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CollectionSample entity.
func (csuo *CollectionSampleUpdateOne) Save(ctx context.Context) (*CollectionSample, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CollectionSampleUpdateOne) SaveX(ctx context.Context) *CollectionSample {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CollectionSampleUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CollectionSampleUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csuo *CollectionSampleUpdateOne) check() error {
	if _, ok := csuo.mutation.SampleID(); csuo.mutation.SampleCleared() && !ok {
		return errors.New(`sierraent: clearing a required unique edge "CollectionSample.sample"`)
	}
	if _, ok := csuo.mutation.CollectionID(); csuo.mutation.CollectionCleared() && !ok {
		return errors.New(`sierraent: clearing a required unique edge "CollectionSample.collection"`)
	}
	return nil
}

func (csuo *CollectionSampleUpdateOne) sqlSave(ctx context.Context) (_node *CollectionSample, err error) {
	if err := csuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(collectionsample.Table, collectionsample.Columns, sqlgraph.NewFieldSpec(collectionsample.FieldID, field.TypeInt))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`sierraent: missing "CollectionSample.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collectionsample.FieldID)
		for _, f := range fields {
			if !collectionsample.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("sierraent: invalid field %q for query", f)}
			}
			if f != collectionsample.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if csuo.mutation.SampleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionsample.SampleTable,
			Columns: []string{collectionsample.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcesample.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionsample.SampleTable,
			Columns: []string{collectionsample.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcesample.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if csuo.mutation.CollectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionsample.CollectionTable,
			Columns: []string{collectionsample.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionsample.CollectionTable,
			Columns: []string{collectionsample.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CollectionSample{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collectionsample.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
