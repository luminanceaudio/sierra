// Code generated by ent, DO NOT EDIT.

package sierraent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/collection"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/collectionsample"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/sourcesample"
)

// CollectionSampleCreate is the builder for creating a CollectionSample entity.
type CollectionSampleCreate struct {
	config
	mutation *CollectionSampleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (csc *CollectionSampleCreate) SetCreateTime(t time.Time) *CollectionSampleCreate {
	csc.mutation.SetCreateTime(t)
	return csc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (csc *CollectionSampleCreate) SetNillableCreateTime(t *time.Time) *CollectionSampleCreate {
	if t != nil {
		csc.SetCreateTime(*t)
	}
	return csc
}

// SetSampleID sets the "sample_id" field.
func (csc *CollectionSampleCreate) SetSampleID(s string) *CollectionSampleCreate {
	csc.mutation.SetSampleID(s)
	return csc
}

// SetCollectionID sets the "collection_id" field.
func (csc *CollectionSampleCreate) SetCollectionID(u uuid.UUID) *CollectionSampleCreate {
	csc.mutation.SetCollectionID(u)
	return csc
}

// SetSample sets the "sample" edge to the SourceSample entity.
func (csc *CollectionSampleCreate) SetSample(s *SourceSample) *CollectionSampleCreate {
	return csc.SetSampleID(s.ID)
}

// SetCollection sets the "collection" edge to the Collection entity.
func (csc *CollectionSampleCreate) SetCollection(c *Collection) *CollectionSampleCreate {
	return csc.SetCollectionID(c.ID)
}

// Mutation returns the CollectionSampleMutation object of the builder.
func (csc *CollectionSampleCreate) Mutation() *CollectionSampleMutation {
	return csc.mutation
}

// Save creates the CollectionSample in the database.
func (csc *CollectionSampleCreate) Save(ctx context.Context) (*CollectionSample, error) {
	csc.defaults()
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CollectionSampleCreate) SaveX(ctx context.Context) *CollectionSample {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CollectionSampleCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CollectionSampleCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csc *CollectionSampleCreate) defaults() {
	if _, ok := csc.mutation.CreateTime(); !ok {
		v := collectionsample.DefaultCreateTime()
		csc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CollectionSampleCreate) check() error {
	if _, ok := csc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`sierraent: missing required field "CollectionSample.create_time"`)}
	}
	if _, ok := csc.mutation.SampleID(); !ok {
		return &ValidationError{Name: "sample_id", err: errors.New(`sierraent: missing required field "CollectionSample.sample_id"`)}
	}
	if _, ok := csc.mutation.CollectionID(); !ok {
		return &ValidationError{Name: "collection_id", err: errors.New(`sierraent: missing required field "CollectionSample.collection_id"`)}
	}
	if _, ok := csc.mutation.SampleID(); !ok {
		return &ValidationError{Name: "sample", err: errors.New(`sierraent: missing required edge "CollectionSample.sample"`)}
	}
	if _, ok := csc.mutation.CollectionID(); !ok {
		return &ValidationError{Name: "collection", err: errors.New(`sierraent: missing required edge "CollectionSample.collection"`)}
	}
	return nil
}

func (csc *CollectionSampleCreate) sqlSave(ctx context.Context) (*CollectionSample, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *CollectionSampleCreate) createSpec() (*CollectionSample, *sqlgraph.CreateSpec) {
	var (
		_node = &CollectionSample{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(collectionsample.Table, sqlgraph.NewFieldSpec(collectionsample.FieldID, field.TypeInt))
	)
	_spec.OnConflict = csc.conflict
	if value, ok := csc.mutation.CreateTime(); ok {
		_spec.SetField(collectionsample.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if nodes := csc.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionsample.SampleTable,
			Columns: []string{collectionsample.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sourcesample.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SampleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := csc.mutation.CollectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collectionsample.CollectionTable,
			Columns: []string{collectionsample.CollectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collection.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CollectionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CollectionSample.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CollectionSampleUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (csc *CollectionSampleCreate) OnConflict(opts ...sql.ConflictOption) *CollectionSampleUpsertOne {
	csc.conflict = opts
	return &CollectionSampleUpsertOne{
		create: csc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CollectionSample.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (csc *CollectionSampleCreate) OnConflictColumns(columns ...string) *CollectionSampleUpsertOne {
	csc.conflict = append(csc.conflict, sql.ConflictColumns(columns...))
	return &CollectionSampleUpsertOne{
		create: csc,
	}
}

type (
	// CollectionSampleUpsertOne is the builder for "upsert"-ing
	//  one CollectionSample node.
	CollectionSampleUpsertOne struct {
		create *CollectionSampleCreate
	}

	// CollectionSampleUpsert is the "OnConflict" setter.
	CollectionSampleUpsert struct {
		*sql.UpdateSet
	}
)

// SetSampleID sets the "sample_id" field.
func (u *CollectionSampleUpsert) SetSampleID(v string) *CollectionSampleUpsert {
	u.Set(collectionsample.FieldSampleID, v)
	return u
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *CollectionSampleUpsert) UpdateSampleID() *CollectionSampleUpsert {
	u.SetExcluded(collectionsample.FieldSampleID)
	return u
}

// SetCollectionID sets the "collection_id" field.
func (u *CollectionSampleUpsert) SetCollectionID(v uuid.UUID) *CollectionSampleUpsert {
	u.Set(collectionsample.FieldCollectionID, v)
	return u
}

// UpdateCollectionID sets the "collection_id" field to the value that was provided on create.
func (u *CollectionSampleUpsert) UpdateCollectionID() *CollectionSampleUpsert {
	u.SetExcluded(collectionsample.FieldCollectionID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CollectionSample.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CollectionSampleUpsertOne) UpdateNewValues() *CollectionSampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(collectionsample.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CollectionSample.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CollectionSampleUpsertOne) Ignore() *CollectionSampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CollectionSampleUpsertOne) DoNothing() *CollectionSampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CollectionSampleCreate.OnConflict
// documentation for more info.
func (u *CollectionSampleUpsertOne) Update(set func(*CollectionSampleUpsert)) *CollectionSampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CollectionSampleUpsert{UpdateSet: update})
	}))
	return u
}

// SetSampleID sets the "sample_id" field.
func (u *CollectionSampleUpsertOne) SetSampleID(v string) *CollectionSampleUpsertOne {
	return u.Update(func(s *CollectionSampleUpsert) {
		s.SetSampleID(v)
	})
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *CollectionSampleUpsertOne) UpdateSampleID() *CollectionSampleUpsertOne {
	return u.Update(func(s *CollectionSampleUpsert) {
		s.UpdateSampleID()
	})
}

// SetCollectionID sets the "collection_id" field.
func (u *CollectionSampleUpsertOne) SetCollectionID(v uuid.UUID) *CollectionSampleUpsertOne {
	return u.Update(func(s *CollectionSampleUpsert) {
		s.SetCollectionID(v)
	})
}

// UpdateCollectionID sets the "collection_id" field to the value that was provided on create.
func (u *CollectionSampleUpsertOne) UpdateCollectionID() *CollectionSampleUpsertOne {
	return u.Update(func(s *CollectionSampleUpsert) {
		s.UpdateCollectionID()
	})
}

// Exec executes the query.
func (u *CollectionSampleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("sierraent: missing options for CollectionSampleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CollectionSampleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CollectionSampleUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CollectionSampleUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CollectionSampleCreateBulk is the builder for creating many CollectionSample entities in bulk.
type CollectionSampleCreateBulk struct {
	config
	err      error
	builders []*CollectionSampleCreate
	conflict []sql.ConflictOption
}

// Save creates the CollectionSample entities in the database.
func (cscb *CollectionSampleCreateBulk) Save(ctx context.Context) ([]*CollectionSample, error) {
	if cscb.err != nil {
		return nil, cscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CollectionSample, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CollectionSampleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CollectionSampleCreateBulk) SaveX(ctx context.Context) []*CollectionSample {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CollectionSampleCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CollectionSampleCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CollectionSample.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CollectionSampleUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (cscb *CollectionSampleCreateBulk) OnConflict(opts ...sql.ConflictOption) *CollectionSampleUpsertBulk {
	cscb.conflict = opts
	return &CollectionSampleUpsertBulk{
		create: cscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CollectionSample.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cscb *CollectionSampleCreateBulk) OnConflictColumns(columns ...string) *CollectionSampleUpsertBulk {
	cscb.conflict = append(cscb.conflict, sql.ConflictColumns(columns...))
	return &CollectionSampleUpsertBulk{
		create: cscb,
	}
}

// CollectionSampleUpsertBulk is the builder for "upsert"-ing
// a bulk of CollectionSample nodes.
type CollectionSampleUpsertBulk struct {
	create *CollectionSampleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CollectionSample.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CollectionSampleUpsertBulk) UpdateNewValues() *CollectionSampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(collectionsample.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CollectionSample.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CollectionSampleUpsertBulk) Ignore() *CollectionSampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CollectionSampleUpsertBulk) DoNothing() *CollectionSampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CollectionSampleCreateBulk.OnConflict
// documentation for more info.
func (u *CollectionSampleUpsertBulk) Update(set func(*CollectionSampleUpsert)) *CollectionSampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CollectionSampleUpsert{UpdateSet: update})
	}))
	return u
}

// SetSampleID sets the "sample_id" field.
func (u *CollectionSampleUpsertBulk) SetSampleID(v string) *CollectionSampleUpsertBulk {
	return u.Update(func(s *CollectionSampleUpsert) {
		s.SetSampleID(v)
	})
}

// UpdateSampleID sets the "sample_id" field to the value that was provided on create.
func (u *CollectionSampleUpsertBulk) UpdateSampleID() *CollectionSampleUpsertBulk {
	return u.Update(func(s *CollectionSampleUpsert) {
		s.UpdateSampleID()
	})
}

// SetCollectionID sets the "collection_id" field.
func (u *CollectionSampleUpsertBulk) SetCollectionID(v uuid.UUID) *CollectionSampleUpsertBulk {
	return u.Update(func(s *CollectionSampleUpsert) {
		s.SetCollectionID(v)
	})
}

// UpdateCollectionID sets the "collection_id" field to the value that was provided on create.
func (u *CollectionSampleUpsertBulk) UpdateCollectionID() *CollectionSampleUpsertBulk {
	return u.Update(func(s *CollectionSampleUpsert) {
		s.UpdateCollectionID()
	})
}

// Exec executes the query.
func (u *CollectionSampleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("sierraent: OnConflict was set for builder %d. Set it on the CollectionSampleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("sierraent: missing options for CollectionSampleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CollectionSampleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
