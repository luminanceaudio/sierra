// Code generated by ent, DO NOT EDIT.

package collectionsample

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the collectionsample type in the database.
	Label = "collection_sample"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldSampleID holds the string denoting the sample_id field in the database.
	FieldSampleID = "sample_id"
	// FieldCollectionID holds the string denoting the collection_id field in the database.
	FieldCollectionID = "collection_id"
	// EdgeSample holds the string denoting the sample edge name in mutations.
	EdgeSample = "sample"
	// EdgeCollection holds the string denoting the collection edge name in mutations.
	EdgeCollection = "collection"
	// SourceSampleFieldID holds the string denoting the ID field of the SourceSample.
	SourceSampleFieldID = "uri"
	// Table holds the table name of the collectionsample in the database.
	Table = "collection_samples"
	// SampleTable is the table that holds the sample relation/edge.
	SampleTable = "collection_samples"
	// SampleInverseTable is the table name for the SourceSample entity.
	// It exists in this package in order to avoid circular dependency with the "sourcesample" package.
	SampleInverseTable = "source_samples"
	// SampleColumn is the table column denoting the sample relation/edge.
	SampleColumn = "sample_id"
	// CollectionTable is the table that holds the collection relation/edge.
	CollectionTable = "collection_samples"
	// CollectionInverseTable is the table name for the Collection entity.
	// It exists in this package in order to avoid circular dependency with the "collection" package.
	CollectionInverseTable = "collections"
	// CollectionColumn is the table column denoting the collection relation/edge.
	CollectionColumn = "collection_id"
)

// Columns holds all SQL columns for collectionsample fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldSampleID,
	FieldCollectionID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)

// OrderOption defines the ordering options for the CollectionSample queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// BySampleID orders the results by the sample_id field.
func BySampleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSampleID, opts...).ToFunc()
}

// ByCollectionID orders the results by the collection_id field.
func ByCollectionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCollectionID, opts...).ToFunc()
}

// BySampleField orders the results by sample field.
func BySampleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSampleStep(), sql.OrderByField(field, opts...))
	}
}

// ByCollectionField orders the results by collection field.
func ByCollectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCollectionStep(), sql.OrderByField(field, opts...))
	}
}
func newSampleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SampleInverseTable, SourceSampleFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SampleTable, SampleColumn),
	)
}
func newCollectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CollectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CollectionTable, CollectionColumn),
	)
}
