// Code generated by ent, DO NOT EDIT.

package collectionsample

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldEQ(FieldCreateTime, v))
}

// SampleID applies equality check predicate on the "sample_id" field. It's identical to SampleIDEQ.
func SampleID(v string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldEQ(FieldSampleID, v))
}

// CollectionID applies equality check predicate on the "collection_id" field. It's identical to CollectionIDEQ.
func CollectionID(v uuid.UUID) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldEQ(FieldCollectionID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldLTE(FieldCreateTime, v))
}

// SampleIDEQ applies the EQ predicate on the "sample_id" field.
func SampleIDEQ(v string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldEQ(FieldSampleID, v))
}

// SampleIDNEQ applies the NEQ predicate on the "sample_id" field.
func SampleIDNEQ(v string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldNEQ(FieldSampleID, v))
}

// SampleIDIn applies the In predicate on the "sample_id" field.
func SampleIDIn(vs ...string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldIn(FieldSampleID, vs...))
}

// SampleIDNotIn applies the NotIn predicate on the "sample_id" field.
func SampleIDNotIn(vs ...string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldNotIn(FieldSampleID, vs...))
}

// SampleIDGT applies the GT predicate on the "sample_id" field.
func SampleIDGT(v string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldGT(FieldSampleID, v))
}

// SampleIDGTE applies the GTE predicate on the "sample_id" field.
func SampleIDGTE(v string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldGTE(FieldSampleID, v))
}

// SampleIDLT applies the LT predicate on the "sample_id" field.
func SampleIDLT(v string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldLT(FieldSampleID, v))
}

// SampleIDLTE applies the LTE predicate on the "sample_id" field.
func SampleIDLTE(v string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldLTE(FieldSampleID, v))
}

// SampleIDContains applies the Contains predicate on the "sample_id" field.
func SampleIDContains(v string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldContains(FieldSampleID, v))
}

// SampleIDHasPrefix applies the HasPrefix predicate on the "sample_id" field.
func SampleIDHasPrefix(v string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldHasPrefix(FieldSampleID, v))
}

// SampleIDHasSuffix applies the HasSuffix predicate on the "sample_id" field.
func SampleIDHasSuffix(v string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldHasSuffix(FieldSampleID, v))
}

// SampleIDEqualFold applies the EqualFold predicate on the "sample_id" field.
func SampleIDEqualFold(v string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldEqualFold(FieldSampleID, v))
}

// SampleIDContainsFold applies the ContainsFold predicate on the "sample_id" field.
func SampleIDContainsFold(v string) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldContainsFold(FieldSampleID, v))
}

// CollectionIDEQ applies the EQ predicate on the "collection_id" field.
func CollectionIDEQ(v uuid.UUID) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldEQ(FieldCollectionID, v))
}

// CollectionIDNEQ applies the NEQ predicate on the "collection_id" field.
func CollectionIDNEQ(v uuid.UUID) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldNEQ(FieldCollectionID, v))
}

// CollectionIDIn applies the In predicate on the "collection_id" field.
func CollectionIDIn(vs ...uuid.UUID) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldIn(FieldCollectionID, vs...))
}

// CollectionIDNotIn applies the NotIn predicate on the "collection_id" field.
func CollectionIDNotIn(vs ...uuid.UUID) predicate.CollectionSample {
	return predicate.CollectionSample(sql.FieldNotIn(FieldCollectionID, vs...))
}

// HasSample applies the HasEdge predicate on the "sample" edge.
func HasSample() predicate.CollectionSample {
	return predicate.CollectionSample(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SampleTable, SampleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSampleWith applies the HasEdge predicate on the "sample" edge with a given conditions (other predicates).
func HasSampleWith(preds ...predicate.SourceSample) predicate.CollectionSample {
	return predicate.CollectionSample(func(s *sql.Selector) {
		step := newSampleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCollection applies the HasEdge predicate on the "collection" edge.
func HasCollection() predicate.CollectionSample {
	return predicate.CollectionSample(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CollectionTable, CollectionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCollectionWith applies the HasEdge predicate on the "collection" edge with a given conditions (other predicates).
func HasCollectionWith(preds ...predicate.Collection) predicate.CollectionSample {
	return predicate.CollectionSample(func(s *sql.Selector) {
		step := newCollectionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CollectionSample) predicate.CollectionSample {
	return predicate.CollectionSample(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CollectionSample) predicate.CollectionSample {
	return predicate.CollectionSample(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CollectionSample) predicate.CollectionSample {
	return predicate.CollectionSample(sql.NotPredicates(p))
}
