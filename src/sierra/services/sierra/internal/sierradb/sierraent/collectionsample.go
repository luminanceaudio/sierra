// Code generated by ent, DO NOT EDIT.

package sierraent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/collection"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/collectionsample"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/sourcesample"
)

// CollectionSample is the model entity for the CollectionSample schema.
type CollectionSample struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// SampleID holds the value of the "sample_id" field.
	SampleID string `json:"sample_id,omitempty"`
	// CollectionID holds the value of the "collection_id" field.
	CollectionID uuid.UUID `json:"collection_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CollectionSampleQuery when eager-loading is set.
	Edges        CollectionSampleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CollectionSampleEdges holds the relations/edges for other nodes in the graph.
type CollectionSampleEdges struct {
	// Sample holds the value of the sample edge.
	Sample *SourceSample `json:"sample,omitempty"`
	// Collection holds the value of the collection edge.
	Collection *Collection `json:"collection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SampleOrErr returns the Sample value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CollectionSampleEdges) SampleOrErr() (*SourceSample, error) {
	if e.Sample != nil {
		return e.Sample, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: sourcesample.Label}
	}
	return nil, &NotLoadedError{edge: "sample"}
}

// CollectionOrErr returns the Collection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CollectionSampleEdges) CollectionOrErr() (*Collection, error) {
	if e.Collection != nil {
		return e.Collection, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: collection.Label}
	}
	return nil, &NotLoadedError{edge: "collection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CollectionSample) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case collectionsample.FieldID:
			values[i] = new(sql.NullInt64)
		case collectionsample.FieldSampleID:
			values[i] = new(sql.NullString)
		case collectionsample.FieldCreateTime:
			values[i] = new(sql.NullTime)
		case collectionsample.FieldCollectionID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CollectionSample fields.
func (cs *CollectionSample) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case collectionsample.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		case collectionsample.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				cs.CreateTime = value.Time
			}
		case collectionsample.FieldSampleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sample_id", values[i])
			} else if value.Valid {
				cs.SampleID = value.String
			}
		case collectionsample.FieldCollectionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field collection_id", values[i])
			} else if value != nil {
				cs.CollectionID = *value
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CollectionSample.
// This includes values selected through modifiers, order, etc.
func (cs *CollectionSample) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QuerySample queries the "sample" edge of the CollectionSample entity.
func (cs *CollectionSample) QuerySample() *SourceSampleQuery {
	return NewCollectionSampleClient(cs.config).QuerySample(cs)
}

// QueryCollection queries the "collection" edge of the CollectionSample entity.
func (cs *CollectionSample) QueryCollection() *CollectionQuery {
	return NewCollectionSampleClient(cs.config).QueryCollection(cs)
}

// Update returns a builder for updating this CollectionSample.
// Note that you need to call CollectionSample.Unwrap() before calling this method if this CollectionSample
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CollectionSample) Update() *CollectionSampleUpdateOne {
	return NewCollectionSampleClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the CollectionSample entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CollectionSample) Unwrap() *CollectionSample {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("sierraent: CollectionSample is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CollectionSample) String() string {
	var builder strings.Builder
	builder.WriteString("CollectionSample(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("create_time=")
	builder.WriteString(cs.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sample_id=")
	builder.WriteString(cs.SampleID)
	builder.WriteString(", ")
	builder.WriteString("collection_id=")
	builder.WriteString(fmt.Sprintf("%v", cs.CollectionID))
	builder.WriteByte(')')
	return builder.String()
}

// CollectionSamples is a parsable slice of CollectionSample.
type CollectionSamples []*CollectionSample
