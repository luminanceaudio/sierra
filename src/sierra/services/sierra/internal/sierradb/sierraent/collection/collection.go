// Code generated by ent, DO NOT EDIT.

package collection

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the collection type in the database.
	Label = "collection"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeSample holds the string denoting the sample edge name in mutations.
	EdgeSample = "sample"
	// EdgeCollectionSamples holds the string denoting the collection_samples edge name in mutations.
	EdgeCollectionSamples = "collection_samples"
	// SourceSampleFieldID holds the string denoting the ID field of the SourceSample.
	SourceSampleFieldID = "uri"
	// Table holds the table name of the collection in the database.
	Table = "collections"
	// SampleTable is the table that holds the sample relation/edge. The primary key declared below.
	SampleTable = "collection_samples"
	// SampleInverseTable is the table name for the SourceSample entity.
	// It exists in this package in order to avoid circular dependency with the "sourcesample" package.
	SampleInverseTable = "source_samples"
	// CollectionSamplesTable is the table that holds the collection_samples relation/edge.
	CollectionSamplesTable = "collection_samples"
	// CollectionSamplesInverseTable is the table name for the CollectionSample entity.
	// It exists in this package in order to avoid circular dependency with the "collectionsample" package.
	CollectionSamplesInverseTable = "collection_samples"
	// CollectionSamplesColumn is the table column denoting the collection_samples relation/edge.
	CollectionSamplesColumn = "collection_id"
)

// Columns holds all SQL columns for collection fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldName,
}

var (
	// SamplePrimaryKey and SampleColumn2 are the table columns denoting the
	// primary key for the sample relation (M2M).
	SamplePrimaryKey = []string{"sample_id", "collection_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)

// OrderOption defines the ordering options for the Collection queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySampleCount orders the results by sample count.
func BySampleCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSampleStep(), opts...)
	}
}

// BySample orders the results by sample terms.
func BySample(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSampleStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCollectionSamplesCount orders the results by collection_samples count.
func ByCollectionSamplesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCollectionSamplesStep(), opts...)
	}
}

// ByCollectionSamples orders the results by collection_samples terms.
func ByCollectionSamples(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCollectionSamplesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSampleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SampleInverseTable, SourceSampleFieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SampleTable, SamplePrimaryKey...),
	)
}
func newCollectionSamplesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CollectionSamplesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CollectionSamplesTable, CollectionSamplesColumn),
	)
}
