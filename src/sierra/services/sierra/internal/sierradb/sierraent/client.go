// Code generated by ent, DO NOT EDIT.

package sierraent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/collection"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/collectionsample"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/sample"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/source"
	"github.com/luminanceaudio/sierra/src/sierra/services/sierra/internal/sierradb/sierraent/sourcesample"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Collection is the client for interacting with the Collection builders.
	Collection *CollectionClient
	// CollectionSample is the client for interacting with the CollectionSample builders.
	CollectionSample *CollectionSampleClient
	// Sample is the client for interacting with the Sample builders.
	Sample *SampleClient
	// Source is the client for interacting with the Source builders.
	Source *SourceClient
	// SourceSample is the client for interacting with the SourceSample builders.
	SourceSample *SourceSampleClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Collection = NewCollectionClient(c.config)
	c.CollectionSample = NewCollectionSampleClient(c.config)
	c.Sample = NewSampleClient(c.config)
	c.Source = NewSourceClient(c.config)
	c.SourceSample = NewSourceSampleClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("sierraent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("sierraent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Collection:       NewCollectionClient(cfg),
		CollectionSample: NewCollectionSampleClient(cfg),
		Sample:           NewSampleClient(cfg),
		Source:           NewSourceClient(cfg),
		SourceSample:     NewSourceSampleClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Collection:       NewCollectionClient(cfg),
		CollectionSample: NewCollectionSampleClient(cfg),
		Sample:           NewSampleClient(cfg),
		Source:           NewSourceClient(cfg),
		SourceSample:     NewSourceSampleClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Collection.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Collection.Use(hooks...)
	c.CollectionSample.Use(hooks...)
	c.Sample.Use(hooks...)
	c.Source.Use(hooks...)
	c.SourceSample.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Collection.Intercept(interceptors...)
	c.CollectionSample.Intercept(interceptors...)
	c.Sample.Intercept(interceptors...)
	c.Source.Intercept(interceptors...)
	c.SourceSample.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CollectionMutation:
		return c.Collection.mutate(ctx, m)
	case *CollectionSampleMutation:
		return c.CollectionSample.mutate(ctx, m)
	case *SampleMutation:
		return c.Sample.mutate(ctx, m)
	case *SourceMutation:
		return c.Source.mutate(ctx, m)
	case *SourceSampleMutation:
		return c.SourceSample.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("sierraent: unknown mutation type %T", m)
	}
}

// CollectionClient is a client for the Collection schema.
type CollectionClient struct {
	config
}

// NewCollectionClient returns a client for the Collection from the given config.
func NewCollectionClient(c config) *CollectionClient {
	return &CollectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `collection.Hooks(f(g(h())))`.
func (c *CollectionClient) Use(hooks ...Hook) {
	c.hooks.Collection = append(c.hooks.Collection, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `collection.Intercept(f(g(h())))`.
func (c *CollectionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Collection = append(c.inters.Collection, interceptors...)
}

// Create returns a builder for creating a Collection entity.
func (c *CollectionClient) Create() *CollectionCreate {
	mutation := newCollectionMutation(c.config, OpCreate)
	return &CollectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Collection entities.
func (c *CollectionClient) CreateBulk(builders ...*CollectionCreate) *CollectionCreateBulk {
	return &CollectionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CollectionClient) MapCreateBulk(slice any, setFunc func(*CollectionCreate, int)) *CollectionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CollectionCreateBulk{err: fmt.Errorf("calling to CollectionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CollectionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CollectionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Collection.
func (c *CollectionClient) Update() *CollectionUpdate {
	mutation := newCollectionMutation(c.config, OpUpdate)
	return &CollectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CollectionClient) UpdateOne(co *Collection) *CollectionUpdateOne {
	mutation := newCollectionMutation(c.config, OpUpdateOne, withCollection(co))
	return &CollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CollectionClient) UpdateOneID(id uuid.UUID) *CollectionUpdateOne {
	mutation := newCollectionMutation(c.config, OpUpdateOne, withCollectionID(id))
	return &CollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Collection.
func (c *CollectionClient) Delete() *CollectionDelete {
	mutation := newCollectionMutation(c.config, OpDelete)
	return &CollectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CollectionClient) DeleteOne(co *Collection) *CollectionDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CollectionClient) DeleteOneID(id uuid.UUID) *CollectionDeleteOne {
	builder := c.Delete().Where(collection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CollectionDeleteOne{builder}
}

// Query returns a query builder for Collection.
func (c *CollectionClient) Query() *CollectionQuery {
	return &CollectionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCollection},
		inters: c.Interceptors(),
	}
}

// Get returns a Collection entity by its id.
func (c *CollectionClient) Get(ctx context.Context, id uuid.UUID) (*Collection, error) {
	return c.Query().Where(collection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CollectionClient) GetX(ctx context.Context, id uuid.UUID) *Collection {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySample queries the sample edge of a Collection.
func (c *CollectionClient) QuerySample(co *Collection) *SourceSampleQuery {
	query := (&SourceSampleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(collection.Table, collection.FieldID, id),
			sqlgraph.To(sourcesample.Table, sourcesample.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, collection.SampleTable, collection.SamplePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCollectionSamples queries the collection_samples edge of a Collection.
func (c *CollectionClient) QueryCollectionSamples(co *Collection) *CollectionSampleQuery {
	query := (&CollectionSampleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(collection.Table, collection.FieldID, id),
			sqlgraph.To(collectionsample.Table, collectionsample.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, collection.CollectionSamplesTable, collection.CollectionSamplesColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CollectionClient) Hooks() []Hook {
	return c.hooks.Collection
}

// Interceptors returns the client interceptors.
func (c *CollectionClient) Interceptors() []Interceptor {
	return c.inters.Collection
}

func (c *CollectionClient) mutate(ctx context.Context, m *CollectionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CollectionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CollectionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CollectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CollectionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("sierraent: unknown Collection mutation op: %q", m.Op())
	}
}

// CollectionSampleClient is a client for the CollectionSample schema.
type CollectionSampleClient struct {
	config
}

// NewCollectionSampleClient returns a client for the CollectionSample from the given config.
func NewCollectionSampleClient(c config) *CollectionSampleClient {
	return &CollectionSampleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `collectionsample.Hooks(f(g(h())))`.
func (c *CollectionSampleClient) Use(hooks ...Hook) {
	c.hooks.CollectionSample = append(c.hooks.CollectionSample, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `collectionsample.Intercept(f(g(h())))`.
func (c *CollectionSampleClient) Intercept(interceptors ...Interceptor) {
	c.inters.CollectionSample = append(c.inters.CollectionSample, interceptors...)
}

// Create returns a builder for creating a CollectionSample entity.
func (c *CollectionSampleClient) Create() *CollectionSampleCreate {
	mutation := newCollectionSampleMutation(c.config, OpCreate)
	return &CollectionSampleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CollectionSample entities.
func (c *CollectionSampleClient) CreateBulk(builders ...*CollectionSampleCreate) *CollectionSampleCreateBulk {
	return &CollectionSampleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CollectionSampleClient) MapCreateBulk(slice any, setFunc func(*CollectionSampleCreate, int)) *CollectionSampleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CollectionSampleCreateBulk{err: fmt.Errorf("calling to CollectionSampleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CollectionSampleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CollectionSampleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CollectionSample.
func (c *CollectionSampleClient) Update() *CollectionSampleUpdate {
	mutation := newCollectionSampleMutation(c.config, OpUpdate)
	return &CollectionSampleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CollectionSampleClient) UpdateOne(cs *CollectionSample) *CollectionSampleUpdateOne {
	mutation := newCollectionSampleMutation(c.config, OpUpdateOne, withCollectionSample(cs))
	return &CollectionSampleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CollectionSampleClient) UpdateOneID(id int) *CollectionSampleUpdateOne {
	mutation := newCollectionSampleMutation(c.config, OpUpdateOne, withCollectionSampleID(id))
	return &CollectionSampleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CollectionSample.
func (c *CollectionSampleClient) Delete() *CollectionSampleDelete {
	mutation := newCollectionSampleMutation(c.config, OpDelete)
	return &CollectionSampleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CollectionSampleClient) DeleteOne(cs *CollectionSample) *CollectionSampleDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CollectionSampleClient) DeleteOneID(id int) *CollectionSampleDeleteOne {
	builder := c.Delete().Where(collectionsample.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CollectionSampleDeleteOne{builder}
}

// Query returns a query builder for CollectionSample.
func (c *CollectionSampleClient) Query() *CollectionSampleQuery {
	return &CollectionSampleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCollectionSample},
		inters: c.Interceptors(),
	}
}

// Get returns a CollectionSample entity by its id.
func (c *CollectionSampleClient) Get(ctx context.Context, id int) (*CollectionSample, error) {
	return c.Query().Where(collectionsample.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CollectionSampleClient) GetX(ctx context.Context, id int) *CollectionSample {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySample queries the sample edge of a CollectionSample.
func (c *CollectionSampleClient) QuerySample(cs *CollectionSample) *SourceSampleQuery {
	query := (&SourceSampleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(collectionsample.Table, collectionsample.FieldID, id),
			sqlgraph.To(sourcesample.Table, sourcesample.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, collectionsample.SampleTable, collectionsample.SampleColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCollection queries the collection edge of a CollectionSample.
func (c *CollectionSampleClient) QueryCollection(cs *CollectionSample) *CollectionQuery {
	query := (&CollectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(collectionsample.Table, collectionsample.FieldID, id),
			sqlgraph.To(collection.Table, collection.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, collectionsample.CollectionTable, collectionsample.CollectionColumn),
		)
		fromV = sqlgraph.Neighbors(cs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CollectionSampleClient) Hooks() []Hook {
	return c.hooks.CollectionSample
}

// Interceptors returns the client interceptors.
func (c *CollectionSampleClient) Interceptors() []Interceptor {
	return c.inters.CollectionSample
}

func (c *CollectionSampleClient) mutate(ctx context.Context, m *CollectionSampleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CollectionSampleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CollectionSampleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CollectionSampleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CollectionSampleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("sierraent: unknown CollectionSample mutation op: %q", m.Op())
	}
}

// SampleClient is a client for the Sample schema.
type SampleClient struct {
	config
}

// NewSampleClient returns a client for the Sample from the given config.
func NewSampleClient(c config) *SampleClient {
	return &SampleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sample.Hooks(f(g(h())))`.
func (c *SampleClient) Use(hooks ...Hook) {
	c.hooks.Sample = append(c.hooks.Sample, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sample.Intercept(f(g(h())))`.
func (c *SampleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Sample = append(c.inters.Sample, interceptors...)
}

// Create returns a builder for creating a Sample entity.
func (c *SampleClient) Create() *SampleCreate {
	mutation := newSampleMutation(c.config, OpCreate)
	return &SampleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Sample entities.
func (c *SampleClient) CreateBulk(builders ...*SampleCreate) *SampleCreateBulk {
	return &SampleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SampleClient) MapCreateBulk(slice any, setFunc func(*SampleCreate, int)) *SampleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SampleCreateBulk{err: fmt.Errorf("calling to SampleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SampleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SampleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Sample.
func (c *SampleClient) Update() *SampleUpdate {
	mutation := newSampleMutation(c.config, OpUpdate)
	return &SampleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SampleClient) UpdateOne(s *Sample) *SampleUpdateOne {
	mutation := newSampleMutation(c.config, OpUpdateOne, withSample(s))
	return &SampleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SampleClient) UpdateOneID(id string) *SampleUpdateOne {
	mutation := newSampleMutation(c.config, OpUpdateOne, withSampleID(id))
	return &SampleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Sample.
func (c *SampleClient) Delete() *SampleDelete {
	mutation := newSampleMutation(c.config, OpDelete)
	return &SampleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SampleClient) DeleteOne(s *Sample) *SampleDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SampleClient) DeleteOneID(id string) *SampleDeleteOne {
	builder := c.Delete().Where(sample.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SampleDeleteOne{builder}
}

// Query returns a query builder for Sample.
func (c *SampleClient) Query() *SampleQuery {
	return &SampleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSample},
		inters: c.Interceptors(),
	}
}

// Get returns a Sample entity by its id.
func (c *SampleClient) Get(ctx context.Context, id string) (*Sample, error) {
	return c.Query().Where(sample.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SampleClient) GetX(ctx context.Context, id string) *Sample {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySource queries the source edge of a Sample.
func (c *SampleClient) QuerySource(s *Sample) *SourceSampleQuery {
	query := (&SourceSampleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sample.Table, sample.FieldID, id),
			sqlgraph.To(sourcesample.Table, sourcesample.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, sample.SourceTable, sample.SourceColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SampleClient) Hooks() []Hook {
	return c.hooks.Sample
}

// Interceptors returns the client interceptors.
func (c *SampleClient) Interceptors() []Interceptor {
	return c.inters.Sample
}

func (c *SampleClient) mutate(ctx context.Context, m *SampleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SampleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SampleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SampleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SampleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("sierraent: unknown Sample mutation op: %q", m.Op())
	}
}

// SourceClient is a client for the Source schema.
type SourceClient struct {
	config
}

// NewSourceClient returns a client for the Source from the given config.
func NewSourceClient(c config) *SourceClient {
	return &SourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `source.Hooks(f(g(h())))`.
func (c *SourceClient) Use(hooks ...Hook) {
	c.hooks.Source = append(c.hooks.Source, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `source.Intercept(f(g(h())))`.
func (c *SourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.Source = append(c.inters.Source, interceptors...)
}

// Create returns a builder for creating a Source entity.
func (c *SourceClient) Create() *SourceCreate {
	mutation := newSourceMutation(c.config, OpCreate)
	return &SourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Source entities.
func (c *SourceClient) CreateBulk(builders ...*SourceCreate) *SourceCreateBulk {
	return &SourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SourceClient) MapCreateBulk(slice any, setFunc func(*SourceCreate, int)) *SourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SourceCreateBulk{err: fmt.Errorf("calling to SourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Source.
func (c *SourceClient) Update() *SourceUpdate {
	mutation := newSourceMutation(c.config, OpUpdate)
	return &SourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SourceClient) UpdateOne(s *Source) *SourceUpdateOne {
	mutation := newSourceMutation(c.config, OpUpdateOne, withSource(s))
	return &SourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SourceClient) UpdateOneID(id string) *SourceUpdateOne {
	mutation := newSourceMutation(c.config, OpUpdateOne, withSourceID(id))
	return &SourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Source.
func (c *SourceClient) Delete() *SourceDelete {
	mutation := newSourceMutation(c.config, OpDelete)
	return &SourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SourceClient) DeleteOne(s *Source) *SourceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SourceClient) DeleteOneID(id string) *SourceDeleteOne {
	builder := c.Delete().Where(source.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SourceDeleteOne{builder}
}

// Query returns a query builder for Source.
func (c *SourceClient) Query() *SourceQuery {
	return &SourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSource},
		inters: c.Interceptors(),
	}
}

// Get returns a Source entity by its id.
func (c *SourceClient) Get(ctx context.Context, id string) (*Source, error) {
	return c.Query().Where(source.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SourceClient) GetX(ctx context.Context, id string) *Source {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySample queries the sample edge of a Source.
func (c *SourceClient) QuerySample(s *Source) *SourceSampleQuery {
	query := (&SourceSampleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(source.Table, source.FieldID, id),
			sqlgraph.To(sourcesample.Table, sourcesample.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, source.SampleTable, source.SampleColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SourceClient) Hooks() []Hook {
	return c.hooks.Source
}

// Interceptors returns the client interceptors.
func (c *SourceClient) Interceptors() []Interceptor {
	return c.inters.Source
}

func (c *SourceClient) mutate(ctx context.Context, m *SourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("sierraent: unknown Source mutation op: %q", m.Op())
	}
}

// SourceSampleClient is a client for the SourceSample schema.
type SourceSampleClient struct {
	config
}

// NewSourceSampleClient returns a client for the SourceSample from the given config.
func NewSourceSampleClient(c config) *SourceSampleClient {
	return &SourceSampleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sourcesample.Hooks(f(g(h())))`.
func (c *SourceSampleClient) Use(hooks ...Hook) {
	c.hooks.SourceSample = append(c.hooks.SourceSample, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sourcesample.Intercept(f(g(h())))`.
func (c *SourceSampleClient) Intercept(interceptors ...Interceptor) {
	c.inters.SourceSample = append(c.inters.SourceSample, interceptors...)
}

// Create returns a builder for creating a SourceSample entity.
func (c *SourceSampleClient) Create() *SourceSampleCreate {
	mutation := newSourceSampleMutation(c.config, OpCreate)
	return &SourceSampleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SourceSample entities.
func (c *SourceSampleClient) CreateBulk(builders ...*SourceSampleCreate) *SourceSampleCreateBulk {
	return &SourceSampleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SourceSampleClient) MapCreateBulk(slice any, setFunc func(*SourceSampleCreate, int)) *SourceSampleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SourceSampleCreateBulk{err: fmt.Errorf("calling to SourceSampleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SourceSampleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SourceSampleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SourceSample.
func (c *SourceSampleClient) Update() *SourceSampleUpdate {
	mutation := newSourceSampleMutation(c.config, OpUpdate)
	return &SourceSampleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SourceSampleClient) UpdateOne(ss *SourceSample) *SourceSampleUpdateOne {
	mutation := newSourceSampleMutation(c.config, OpUpdateOne, withSourceSample(ss))
	return &SourceSampleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SourceSampleClient) UpdateOneID(id string) *SourceSampleUpdateOne {
	mutation := newSourceSampleMutation(c.config, OpUpdateOne, withSourceSampleID(id))
	return &SourceSampleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SourceSample.
func (c *SourceSampleClient) Delete() *SourceSampleDelete {
	mutation := newSourceSampleMutation(c.config, OpDelete)
	return &SourceSampleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SourceSampleClient) DeleteOne(ss *SourceSample) *SourceSampleDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SourceSampleClient) DeleteOneID(id string) *SourceSampleDeleteOne {
	builder := c.Delete().Where(sourcesample.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SourceSampleDeleteOne{builder}
}

// Query returns a query builder for SourceSample.
func (c *SourceSampleClient) Query() *SourceSampleQuery {
	return &SourceSampleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSourceSample},
		inters: c.Interceptors(),
	}
}

// Get returns a SourceSample entity by its id.
func (c *SourceSampleClient) Get(ctx context.Context, id string) (*SourceSample, error) {
	return c.Query().Where(sourcesample.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SourceSampleClient) GetX(ctx context.Context, id string) *SourceSample {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySource queries the source edge of a SourceSample.
func (c *SourceSampleClient) QuerySource(ss *SourceSample) *SourceQuery {
	query := (&SourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sourcesample.Table, sourcesample.FieldID, id),
			sqlgraph.To(source.Table, source.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, sourcesample.SourceTable, sourcesample.SourceColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySample queries the sample edge of a SourceSample.
func (c *SourceSampleClient) QuerySample(ss *SourceSample) *SampleQuery {
	query := (&SampleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sourcesample.Table, sourcesample.FieldID, id),
			sqlgraph.To(sample.Table, sample.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, sourcesample.SampleTable, sourcesample.SampleColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCollection queries the collection edge of a SourceSample.
func (c *SourceSampleClient) QueryCollection(ss *SourceSample) *CollectionQuery {
	query := (&CollectionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sourcesample.Table, sourcesample.FieldID, id),
			sqlgraph.To(collection.Table, collection.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, sourcesample.CollectionTable, sourcesample.CollectionPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCollectionSamples queries the collection_samples edge of a SourceSample.
func (c *SourceSampleClient) QueryCollectionSamples(ss *SourceSample) *CollectionSampleQuery {
	query := (&CollectionSampleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sourcesample.Table, sourcesample.FieldID, id),
			sqlgraph.To(collectionsample.Table, collectionsample.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, sourcesample.CollectionSamplesTable, sourcesample.CollectionSamplesColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SourceSampleClient) Hooks() []Hook {
	return c.hooks.SourceSample
}

// Interceptors returns the client interceptors.
func (c *SourceSampleClient) Interceptors() []Interceptor {
	return c.inters.SourceSample
}

func (c *SourceSampleClient) mutate(ctx context.Context, m *SourceSampleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SourceSampleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SourceSampleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SourceSampleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SourceSampleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("sierraent: unknown SourceSample mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Collection, CollectionSample, Sample, Source, SourceSample []ent.Hook
	}
	inters struct {
		Collection, CollectionSample, Sample, Source, SourceSample []ent.Interceptor
	}
)
