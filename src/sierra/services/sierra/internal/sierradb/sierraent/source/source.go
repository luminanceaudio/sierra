// Code generated by ent, DO NOT EDIT.

package source

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the source type in the database.
	Label = "source"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uri"
	// EdgeSample holds the string denoting the sample edge name in mutations.
	EdgeSample = "sample"
	// SourceSampleFieldID holds the string denoting the ID field of the SourceSample.
	SourceSampleFieldID = "relative_path"
	// Table holds the table name of the source in the database.
	Table = "sources"
	// SampleTable is the table that holds the sample relation/edge.
	SampleTable = "source_samples"
	// SampleInverseTable is the table name for the SourceSample entity.
	// It exists in this package in order to avoid circular dependency with the "sourcesample" package.
	SampleInverseTable = "source_samples"
	// SampleColumn is the table column denoting the sample relation/edge.
	SampleColumn = "source"
)

// Columns holds all SQL columns for source fields.
var Columns = []string{
	FieldID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Source queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySampleCount orders the results by sample count.
func BySampleCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSampleStep(), opts...)
	}
}

// BySample orders the results by sample terms.
func BySample(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSampleStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSampleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SampleInverseTable, SourceSampleFieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SampleTable, SampleColumn),
	)
}
