// Code generated by ent, DO NOT EDIT.

package sourcesample

import (
	"sierra/services/sierra/internal/sierradb/sierraent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SourceSample {
	return predicate.SourceSample(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SourceSample {
	return predicate.SourceSample(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SourceSample {
	return predicate.SourceSample(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SourceSample {
	return predicate.SourceSample(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SourceSample {
	return predicate.SourceSample(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SourceSample {
	return predicate.SourceSample(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SourceSample {
	return predicate.SourceSample(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SourceSample {
	return predicate.SourceSample(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SourceSample {
	return predicate.SourceSample(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SourceSample {
	return predicate.SourceSample(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SourceSample {
	return predicate.SourceSample(sql.FieldContainsFold(FieldID, id))
}

// HasSource applies the HasEdge predicate on the "source" edge.
func HasSource() predicate.SourceSample {
	return predicate.SourceSample(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SourceTable, SourceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSourceWith applies the HasEdge predicate on the "source" edge with a given conditions (other predicates).
func HasSourceWith(preds ...predicate.Source) predicate.SourceSample {
	return predicate.SourceSample(func(s *sql.Selector) {
		step := newSourceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSample applies the HasEdge predicate on the "sample" edge.
func HasSample() predicate.SourceSample {
	return predicate.SourceSample(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SampleTable, SampleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSampleWith applies the HasEdge predicate on the "sample" edge with a given conditions (other predicates).
func HasSampleWith(preds ...predicate.Sample) predicate.SourceSample {
	return predicate.SourceSample(func(s *sql.Selector) {
		step := newSampleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SourceSample) predicate.SourceSample {
	return predicate.SourceSample(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SourceSample) predicate.SourceSample {
	return predicate.SourceSample(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SourceSample) predicate.SourceSample {
	return predicate.SourceSample(sql.NotPredicates(p))
}
