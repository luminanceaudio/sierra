// Code generated by ent, DO NOT EDIT.

package sierraent

import (
	"context"
	"sierra/services/sierra/internal/sierradb/sierraent/predicate"
	"sierra/services/sierra/internal/sierradb/sierraent/sourcesample"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SourceSampleDelete is the builder for deleting a SourceSample entity.
type SourceSampleDelete struct {
	config
	hooks    []Hook
	mutation *SourceSampleMutation
}

// Where appends a list predicates to the SourceSampleDelete builder.
func (ssd *SourceSampleDelete) Where(ps ...predicate.SourceSample) *SourceSampleDelete {
	ssd.mutation.Where(ps...)
	return ssd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ssd *SourceSampleDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ssd.sqlExec, ssd.mutation, ssd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ssd *SourceSampleDelete) ExecX(ctx context.Context) int {
	n, err := ssd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ssd *SourceSampleDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(sourcesample.Table, sqlgraph.NewFieldSpec(sourcesample.FieldID, field.TypeString))
	if ps := ssd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ssd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ssd.mutation.done = true
	return affected, err
}

// SourceSampleDeleteOne is the builder for deleting a single SourceSample entity.
type SourceSampleDeleteOne struct {
	ssd *SourceSampleDelete
}

// Where appends a list predicates to the SourceSampleDelete builder.
func (ssdo *SourceSampleDeleteOne) Where(ps ...predicate.SourceSample) *SourceSampleDeleteOne {
	ssdo.ssd.mutation.Where(ps...)
	return ssdo
}

// Exec executes the deletion query.
func (ssdo *SourceSampleDeleteOne) Exec(ctx context.Context) error {
	n, err := ssdo.ssd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{sourcesample.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ssdo *SourceSampleDeleteOne) ExecX(ctx context.Context) {
	if err := ssdo.Exec(ctx); err != nil {
		panic(err)
	}
}
