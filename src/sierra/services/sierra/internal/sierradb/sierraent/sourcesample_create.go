// Code generated by ent, DO NOT EDIT.

package sierraent

import (
	"context"
	"errors"
	"fmt"
	"sierra/services/sierra/internal/sierradb/sierraent/sample"
	"sierra/services/sierra/internal/sierradb/sierraent/source"
	"sierra/services/sierra/internal/sierradb/sierraent/sourcesample"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SourceSampleCreate is the builder for creating a SourceSample entity.
type SourceSampleCreate struct {
	config
	mutation *SourceSampleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetID sets the "id" field.
func (ssc *SourceSampleCreate) SetID(s string) *SourceSampleCreate {
	ssc.mutation.SetID(s)
	return ssc
}

// SetSourceID sets the "source" edge to the Source entity by ID.
func (ssc *SourceSampleCreate) SetSourceID(id string) *SourceSampleCreate {
	ssc.mutation.SetSourceID(id)
	return ssc
}

// SetNillableSourceID sets the "source" edge to the Source entity by ID if the given value is not nil.
func (ssc *SourceSampleCreate) SetNillableSourceID(id *string) *SourceSampleCreate {
	if id != nil {
		ssc = ssc.SetSourceID(*id)
	}
	return ssc
}

// SetSource sets the "source" edge to the Source entity.
func (ssc *SourceSampleCreate) SetSource(s *Source) *SourceSampleCreate {
	return ssc.SetSourceID(s.ID)
}

// SetSampleID sets the "sample" edge to the Sample entity by ID.
func (ssc *SourceSampleCreate) SetSampleID(id string) *SourceSampleCreate {
	ssc.mutation.SetSampleID(id)
	return ssc
}

// SetNillableSampleID sets the "sample" edge to the Sample entity by ID if the given value is not nil.
func (ssc *SourceSampleCreate) SetNillableSampleID(id *string) *SourceSampleCreate {
	if id != nil {
		ssc = ssc.SetSampleID(*id)
	}
	return ssc
}

// SetSample sets the "sample" edge to the Sample entity.
func (ssc *SourceSampleCreate) SetSample(s *Sample) *SourceSampleCreate {
	return ssc.SetSampleID(s.ID)
}

// Mutation returns the SourceSampleMutation object of the builder.
func (ssc *SourceSampleCreate) Mutation() *SourceSampleMutation {
	return ssc.mutation
}

// Save creates the SourceSample in the database.
func (ssc *SourceSampleCreate) Save(ctx context.Context) (*SourceSample, error) {
	return withHooks(ctx, ssc.sqlSave, ssc.mutation, ssc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SourceSampleCreate) SaveX(ctx context.Context) *SourceSample {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SourceSampleCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SourceSampleCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SourceSampleCreate) check() error {
	return nil
}

func (ssc *SourceSampleCreate) sqlSave(ctx context.Context) (*SourceSample, error) {
	if err := ssc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SourceSample.ID type: %T", _spec.ID.Value)
		}
	}
	ssc.mutation.id = &_node.ID
	ssc.mutation.done = true
	return _node, nil
}

func (ssc *SourceSampleCreate) createSpec() (*SourceSample, *sqlgraph.CreateSpec) {
	var (
		_node = &SourceSample{config: ssc.config}
		_spec = sqlgraph.NewCreateSpec(sourcesample.Table, sqlgraph.NewFieldSpec(sourcesample.FieldID, field.TypeString))
	)
	_spec.OnConflict = ssc.conflict
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if nodes := ssc.mutation.SourceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sourcesample.SourceTable,
			Columns: []string{sourcesample.SourceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(source.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.source = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.SampleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   sourcesample.SampleTable,
			Columns: []string{sourcesample.SampleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(sample.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.sample = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SourceSample.Create().
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (ssc *SourceSampleCreate) OnConflict(opts ...sql.ConflictOption) *SourceSampleUpsertOne {
	ssc.conflict = opts
	return &SourceSampleUpsertOne{
		create: ssc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SourceSample.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ssc *SourceSampleCreate) OnConflictColumns(columns ...string) *SourceSampleUpsertOne {
	ssc.conflict = append(ssc.conflict, sql.ConflictColumns(columns...))
	return &SourceSampleUpsertOne{
		create: ssc,
	}
}

type (
	// SourceSampleUpsertOne is the builder for "upsert"-ing
	//  one SourceSample node.
	SourceSampleUpsertOne struct {
		create *SourceSampleCreate
	}

	// SourceSampleUpsert is the "OnConflict" setter.
	SourceSampleUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.SourceSample.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sourcesample.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SourceSampleUpsertOne) UpdateNewValues() *SourceSampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sourcesample.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SourceSample.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SourceSampleUpsertOne) Ignore() *SourceSampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SourceSampleUpsertOne) DoNothing() *SourceSampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SourceSampleCreate.OnConflict
// documentation for more info.
func (u *SourceSampleUpsertOne) Update(set func(*SourceSampleUpsert)) *SourceSampleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SourceSampleUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *SourceSampleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("sierraent: missing options for SourceSampleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SourceSampleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SourceSampleUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("sierraent: SourceSampleUpsertOne.ID is not supported by MySQL driver. Use SourceSampleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SourceSampleUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SourceSampleCreateBulk is the builder for creating many SourceSample entities in bulk.
type SourceSampleCreateBulk struct {
	config
	err      error
	builders []*SourceSampleCreate
	conflict []sql.ConflictOption
}

// Save creates the SourceSample entities in the database.
func (sscb *SourceSampleCreateBulk) Save(ctx context.Context) ([]*SourceSample, error) {
	if sscb.err != nil {
		return nil, sscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SourceSample, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SourceSampleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SourceSampleCreateBulk) SaveX(ctx context.Context) []*SourceSample {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SourceSampleCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SourceSampleCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SourceSample.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (sscb *SourceSampleCreateBulk) OnConflict(opts ...sql.ConflictOption) *SourceSampleUpsertBulk {
	sscb.conflict = opts
	return &SourceSampleUpsertBulk{
		create: sscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SourceSample.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sscb *SourceSampleCreateBulk) OnConflictColumns(columns ...string) *SourceSampleUpsertBulk {
	sscb.conflict = append(sscb.conflict, sql.ConflictColumns(columns...))
	return &SourceSampleUpsertBulk{
		create: sscb,
	}
}

// SourceSampleUpsertBulk is the builder for "upsert"-ing
// a bulk of SourceSample nodes.
type SourceSampleUpsertBulk struct {
	create *SourceSampleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SourceSample.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sourcesample.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SourceSampleUpsertBulk) UpdateNewValues() *SourceSampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sourcesample.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SourceSample.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SourceSampleUpsertBulk) Ignore() *SourceSampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SourceSampleUpsertBulk) DoNothing() *SourceSampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SourceSampleCreateBulk.OnConflict
// documentation for more info.
func (u *SourceSampleUpsertBulk) Update(set func(*SourceSampleUpsert)) *SourceSampleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SourceSampleUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *SourceSampleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("sierraent: OnConflict was set for builder %d. Set it on the SourceSampleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("sierraent: missing options for SourceSampleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SourceSampleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
