// Code generated by ent, DO NOT EDIT.

package samplefile

import (
	"sierra/services/sierra/internal/sierradb/internal/sierraent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldLTE(FieldID, id))
}

// Sha256 applies equality check predicate on the "sha256" field. It's identical to Sha256EQ.
func Sha256(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldEQ(FieldSha256, v))
}

// Format applies equality check predicate on the "format" field. It's identical to FormatEQ.
func Format(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldEQ(FieldFormat, v))
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v int64) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldEQ(FieldLength, v))
}

// Sha256EQ applies the EQ predicate on the "sha256" field.
func Sha256EQ(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldEQ(FieldSha256, v))
}

// Sha256NEQ applies the NEQ predicate on the "sha256" field.
func Sha256NEQ(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldNEQ(FieldSha256, v))
}

// Sha256In applies the In predicate on the "sha256" field.
func Sha256In(vs ...string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldIn(FieldSha256, vs...))
}

// Sha256NotIn applies the NotIn predicate on the "sha256" field.
func Sha256NotIn(vs ...string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldNotIn(FieldSha256, vs...))
}

// Sha256GT applies the GT predicate on the "sha256" field.
func Sha256GT(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldGT(FieldSha256, v))
}

// Sha256GTE applies the GTE predicate on the "sha256" field.
func Sha256GTE(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldGTE(FieldSha256, v))
}

// Sha256LT applies the LT predicate on the "sha256" field.
func Sha256LT(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldLT(FieldSha256, v))
}

// Sha256LTE applies the LTE predicate on the "sha256" field.
func Sha256LTE(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldLTE(FieldSha256, v))
}

// Sha256Contains applies the Contains predicate on the "sha256" field.
func Sha256Contains(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldContains(FieldSha256, v))
}

// Sha256HasPrefix applies the HasPrefix predicate on the "sha256" field.
func Sha256HasPrefix(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldHasPrefix(FieldSha256, v))
}

// Sha256HasSuffix applies the HasSuffix predicate on the "sha256" field.
func Sha256HasSuffix(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldHasSuffix(FieldSha256, v))
}

// Sha256EqualFold applies the EqualFold predicate on the "sha256" field.
func Sha256EqualFold(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldEqualFold(FieldSha256, v))
}

// Sha256ContainsFold applies the ContainsFold predicate on the "sha256" field.
func Sha256ContainsFold(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldContainsFold(FieldSha256, v))
}

// FormatEQ applies the EQ predicate on the "format" field.
func FormatEQ(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldEQ(FieldFormat, v))
}

// FormatNEQ applies the NEQ predicate on the "format" field.
func FormatNEQ(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldNEQ(FieldFormat, v))
}

// FormatIn applies the In predicate on the "format" field.
func FormatIn(vs ...string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldIn(FieldFormat, vs...))
}

// FormatNotIn applies the NotIn predicate on the "format" field.
func FormatNotIn(vs ...string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldNotIn(FieldFormat, vs...))
}

// FormatGT applies the GT predicate on the "format" field.
func FormatGT(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldGT(FieldFormat, v))
}

// FormatGTE applies the GTE predicate on the "format" field.
func FormatGTE(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldGTE(FieldFormat, v))
}

// FormatLT applies the LT predicate on the "format" field.
func FormatLT(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldLT(FieldFormat, v))
}

// FormatLTE applies the LTE predicate on the "format" field.
func FormatLTE(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldLTE(FieldFormat, v))
}

// FormatContains applies the Contains predicate on the "format" field.
func FormatContains(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldContains(FieldFormat, v))
}

// FormatHasPrefix applies the HasPrefix predicate on the "format" field.
func FormatHasPrefix(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldHasPrefix(FieldFormat, v))
}

// FormatHasSuffix applies the HasSuffix predicate on the "format" field.
func FormatHasSuffix(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldHasSuffix(FieldFormat, v))
}

// FormatIsNil applies the IsNil predicate on the "format" field.
func FormatIsNil() predicate.SampleFile {
	return predicate.SampleFile(sql.FieldIsNull(FieldFormat))
}

// FormatNotNil applies the NotNil predicate on the "format" field.
func FormatNotNil() predicate.SampleFile {
	return predicate.SampleFile(sql.FieldNotNull(FieldFormat))
}

// FormatEqualFold applies the EqualFold predicate on the "format" field.
func FormatEqualFold(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldEqualFold(FieldFormat, v))
}

// FormatContainsFold applies the ContainsFold predicate on the "format" field.
func FormatContainsFold(v string) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldContainsFold(FieldFormat, v))
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v int64) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldEQ(FieldLength, v))
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v int64) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldNEQ(FieldLength, v))
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...int64) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldIn(FieldLength, vs...))
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...int64) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldNotIn(FieldLength, vs...))
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v int64) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldGT(FieldLength, v))
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v int64) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldGTE(FieldLength, v))
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v int64) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldLT(FieldLength, v))
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v int64) predicate.SampleFile {
	return predicate.SampleFile(sql.FieldLTE(FieldLength, v))
}

// LengthIsNil applies the IsNil predicate on the "length" field.
func LengthIsNil() predicate.SampleFile {
	return predicate.SampleFile(sql.FieldIsNull(FieldLength))
}

// LengthNotNil applies the NotNil predicate on the "length" field.
func LengthNotNil() predicate.SampleFile {
	return predicate.SampleFile(sql.FieldNotNull(FieldLength))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SampleFile) predicate.SampleFile {
	return predicate.SampleFile(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SampleFile) predicate.SampleFile {
	return predicate.SampleFile(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SampleFile) predicate.SampleFile {
	return predicate.SampleFile(sql.NotPredicates(p))
}
