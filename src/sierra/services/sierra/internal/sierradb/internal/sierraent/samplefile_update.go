// Code generated by ent, DO NOT EDIT.

package sierraent

import (
	"context"
	"errors"
	"fmt"
	"sierra/services/sierra/internal/sierradb/internal/sierraent/predicate"
	"sierra/services/sierra/internal/sierradb/internal/sierraent/samplefile"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SampleFileUpdate is the builder for updating SampleFile entities.
type SampleFileUpdate struct {
	config
	hooks    []Hook
	mutation *SampleFileMutation
}

// Where appends a list predicates to the SampleFileUpdate builder.
func (sfu *SampleFileUpdate) Where(ps ...predicate.SampleFile) *SampleFileUpdate {
	sfu.mutation.Where(ps...)
	return sfu
}

// SetSha256 sets the "sha256" field.
func (sfu *SampleFileUpdate) SetSha256(s string) *SampleFileUpdate {
	sfu.mutation.SetSha256(s)
	return sfu
}

// SetNillableSha256 sets the "sha256" field if the given value is not nil.
func (sfu *SampleFileUpdate) SetNillableSha256(s *string) *SampleFileUpdate {
	if s != nil {
		sfu.SetSha256(*s)
	}
	return sfu
}

// SetFormat sets the "format" field.
func (sfu *SampleFileUpdate) SetFormat(s string) *SampleFileUpdate {
	sfu.mutation.SetFormat(s)
	return sfu
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (sfu *SampleFileUpdate) SetNillableFormat(s *string) *SampleFileUpdate {
	if s != nil {
		sfu.SetFormat(*s)
	}
	return sfu
}

// ClearFormat clears the value of the "format" field.
func (sfu *SampleFileUpdate) ClearFormat() *SampleFileUpdate {
	sfu.mutation.ClearFormat()
	return sfu
}

// SetLength sets the "length" field.
func (sfu *SampleFileUpdate) SetLength(i int64) *SampleFileUpdate {
	sfu.mutation.ResetLength()
	sfu.mutation.SetLength(i)
	return sfu
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (sfu *SampleFileUpdate) SetNillableLength(i *int64) *SampleFileUpdate {
	if i != nil {
		sfu.SetLength(*i)
	}
	return sfu
}

// AddLength adds i to the "length" field.
func (sfu *SampleFileUpdate) AddLength(i int64) *SampleFileUpdate {
	sfu.mutation.AddLength(i)
	return sfu
}

// ClearLength clears the value of the "length" field.
func (sfu *SampleFileUpdate) ClearLength() *SampleFileUpdate {
	sfu.mutation.ClearLength()
	return sfu
}

// Mutation returns the SampleFileMutation object of the builder.
func (sfu *SampleFileUpdate) Mutation() *SampleFileMutation {
	return sfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sfu *SampleFileUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sfu.sqlSave, sfu.mutation, sfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfu *SampleFileUpdate) SaveX(ctx context.Context) int {
	affected, err := sfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sfu *SampleFileUpdate) Exec(ctx context.Context) error {
	_, err := sfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfu *SampleFileUpdate) ExecX(ctx context.Context) {
	if err := sfu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sfu *SampleFileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(samplefile.Table, samplefile.Columns, sqlgraph.NewFieldSpec(samplefile.FieldID, field.TypeInt))
	if ps := sfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfu.mutation.Sha256(); ok {
		_spec.SetField(samplefile.FieldSha256, field.TypeString, value)
	}
	if value, ok := sfu.mutation.Format(); ok {
		_spec.SetField(samplefile.FieldFormat, field.TypeString, value)
	}
	if sfu.mutation.FormatCleared() {
		_spec.ClearField(samplefile.FieldFormat, field.TypeString)
	}
	if value, ok := sfu.mutation.Length(); ok {
		_spec.SetField(samplefile.FieldLength, field.TypeInt64, value)
	}
	if value, ok := sfu.mutation.AddedLength(); ok {
		_spec.AddField(samplefile.FieldLength, field.TypeInt64, value)
	}
	if sfu.mutation.LengthCleared() {
		_spec.ClearField(samplefile.FieldLength, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{samplefile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sfu.mutation.done = true
	return n, nil
}

// SampleFileUpdateOne is the builder for updating a single SampleFile entity.
type SampleFileUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SampleFileMutation
}

// SetSha256 sets the "sha256" field.
func (sfuo *SampleFileUpdateOne) SetSha256(s string) *SampleFileUpdateOne {
	sfuo.mutation.SetSha256(s)
	return sfuo
}

// SetNillableSha256 sets the "sha256" field if the given value is not nil.
func (sfuo *SampleFileUpdateOne) SetNillableSha256(s *string) *SampleFileUpdateOne {
	if s != nil {
		sfuo.SetSha256(*s)
	}
	return sfuo
}

// SetFormat sets the "format" field.
func (sfuo *SampleFileUpdateOne) SetFormat(s string) *SampleFileUpdateOne {
	sfuo.mutation.SetFormat(s)
	return sfuo
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (sfuo *SampleFileUpdateOne) SetNillableFormat(s *string) *SampleFileUpdateOne {
	if s != nil {
		sfuo.SetFormat(*s)
	}
	return sfuo
}

// ClearFormat clears the value of the "format" field.
func (sfuo *SampleFileUpdateOne) ClearFormat() *SampleFileUpdateOne {
	sfuo.mutation.ClearFormat()
	return sfuo
}

// SetLength sets the "length" field.
func (sfuo *SampleFileUpdateOne) SetLength(i int64) *SampleFileUpdateOne {
	sfuo.mutation.ResetLength()
	sfuo.mutation.SetLength(i)
	return sfuo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (sfuo *SampleFileUpdateOne) SetNillableLength(i *int64) *SampleFileUpdateOne {
	if i != nil {
		sfuo.SetLength(*i)
	}
	return sfuo
}

// AddLength adds i to the "length" field.
func (sfuo *SampleFileUpdateOne) AddLength(i int64) *SampleFileUpdateOne {
	sfuo.mutation.AddLength(i)
	return sfuo
}

// ClearLength clears the value of the "length" field.
func (sfuo *SampleFileUpdateOne) ClearLength() *SampleFileUpdateOne {
	sfuo.mutation.ClearLength()
	return sfuo
}

// Mutation returns the SampleFileMutation object of the builder.
func (sfuo *SampleFileUpdateOne) Mutation() *SampleFileMutation {
	return sfuo.mutation
}

// Where appends a list predicates to the SampleFileUpdate builder.
func (sfuo *SampleFileUpdateOne) Where(ps ...predicate.SampleFile) *SampleFileUpdateOne {
	sfuo.mutation.Where(ps...)
	return sfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sfuo *SampleFileUpdateOne) Select(field string, fields ...string) *SampleFileUpdateOne {
	sfuo.fields = append([]string{field}, fields...)
	return sfuo
}

// Save executes the query and returns the updated SampleFile entity.
func (sfuo *SampleFileUpdateOne) Save(ctx context.Context) (*SampleFile, error) {
	return withHooks(ctx, sfuo.sqlSave, sfuo.mutation, sfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sfuo *SampleFileUpdateOne) SaveX(ctx context.Context) *SampleFile {
	node, err := sfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sfuo *SampleFileUpdateOne) Exec(ctx context.Context) error {
	_, err := sfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfuo *SampleFileUpdateOne) ExecX(ctx context.Context) {
	if err := sfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sfuo *SampleFileUpdateOne) sqlSave(ctx context.Context) (_node *SampleFile, err error) {
	_spec := sqlgraph.NewUpdateSpec(samplefile.Table, samplefile.Columns, sqlgraph.NewFieldSpec(samplefile.FieldID, field.TypeInt))
	id, ok := sfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`sierraent: missing "SampleFile.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, samplefile.FieldID)
		for _, f := range fields {
			if !samplefile.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("sierraent: invalid field %q for query", f)}
			}
			if f != samplefile.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sfuo.mutation.Sha256(); ok {
		_spec.SetField(samplefile.FieldSha256, field.TypeString, value)
	}
	if value, ok := sfuo.mutation.Format(); ok {
		_spec.SetField(samplefile.FieldFormat, field.TypeString, value)
	}
	if sfuo.mutation.FormatCleared() {
		_spec.ClearField(samplefile.FieldFormat, field.TypeString)
	}
	if value, ok := sfuo.mutation.Length(); ok {
		_spec.SetField(samplefile.FieldLength, field.TypeInt64, value)
	}
	if value, ok := sfuo.mutation.AddedLength(); ok {
		_spec.AddField(samplefile.FieldLength, field.TypeInt64, value)
	}
	if sfuo.mutation.LengthCleared() {
		_spec.ClearField(samplefile.FieldLength, field.TypeInt64)
	}
	_node = &SampleFile{config: sfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{samplefile.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sfuo.mutation.done = true
	return _node, nil
}
