// Code generated by ent, DO NOT EDIT.

package sierraent

import (
	"context"
	"errors"
	"fmt"
	"sierra/services/sierra/internal/sierradb/internal/sierraent/samplefile"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SampleFileCreate is the builder for creating a SampleFile entity.
type SampleFileCreate struct {
	config
	mutation *SampleFileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetSha256 sets the "sha256" field.
func (sfc *SampleFileCreate) SetSha256(s string) *SampleFileCreate {
	sfc.mutation.SetSha256(s)
	return sfc
}

// SetFormat sets the "format" field.
func (sfc *SampleFileCreate) SetFormat(s string) *SampleFileCreate {
	sfc.mutation.SetFormat(s)
	return sfc
}

// SetNillableFormat sets the "format" field if the given value is not nil.
func (sfc *SampleFileCreate) SetNillableFormat(s *string) *SampleFileCreate {
	if s != nil {
		sfc.SetFormat(*s)
	}
	return sfc
}

// SetLength sets the "length" field.
func (sfc *SampleFileCreate) SetLength(i int64) *SampleFileCreate {
	sfc.mutation.SetLength(i)
	return sfc
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (sfc *SampleFileCreate) SetNillableLength(i *int64) *SampleFileCreate {
	if i != nil {
		sfc.SetLength(*i)
	}
	return sfc
}

// Mutation returns the SampleFileMutation object of the builder.
func (sfc *SampleFileCreate) Mutation() *SampleFileMutation {
	return sfc.mutation
}

// Save creates the SampleFile in the database.
func (sfc *SampleFileCreate) Save(ctx context.Context) (*SampleFile, error) {
	return withHooks(ctx, sfc.sqlSave, sfc.mutation, sfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sfc *SampleFileCreate) SaveX(ctx context.Context) *SampleFile {
	v, err := sfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfc *SampleFileCreate) Exec(ctx context.Context) error {
	_, err := sfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfc *SampleFileCreate) ExecX(ctx context.Context) {
	if err := sfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sfc *SampleFileCreate) check() error {
	if _, ok := sfc.mutation.Sha256(); !ok {
		return &ValidationError{Name: "sha256", err: errors.New(`sierraent: missing required field "SampleFile.sha256"`)}
	}
	return nil
}

func (sfc *SampleFileCreate) sqlSave(ctx context.Context) (*SampleFile, error) {
	if err := sfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sfc.mutation.id = &_node.ID
	sfc.mutation.done = true
	return _node, nil
}

func (sfc *SampleFileCreate) createSpec() (*SampleFile, *sqlgraph.CreateSpec) {
	var (
		_node = &SampleFile{config: sfc.config}
		_spec = sqlgraph.NewCreateSpec(samplefile.Table, sqlgraph.NewFieldSpec(samplefile.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sfc.conflict
	if value, ok := sfc.mutation.Sha256(); ok {
		_spec.SetField(samplefile.FieldSha256, field.TypeString, value)
		_node.Sha256 = value
	}
	if value, ok := sfc.mutation.Format(); ok {
		_spec.SetField(samplefile.FieldFormat, field.TypeString, value)
		_node.Format = value
	}
	if value, ok := sfc.mutation.Length(); ok {
		_spec.SetField(samplefile.FieldLength, field.TypeInt64, value)
		_node.Length = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SampleFile.Create().
//		SetSha256(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SampleFileUpsert) {
//			SetSha256(v+v).
//		}).
//		Exec(ctx)
func (sfc *SampleFileCreate) OnConflict(opts ...sql.ConflictOption) *SampleFileUpsertOne {
	sfc.conflict = opts
	return &SampleFileUpsertOne{
		create: sfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SampleFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sfc *SampleFileCreate) OnConflictColumns(columns ...string) *SampleFileUpsertOne {
	sfc.conflict = append(sfc.conflict, sql.ConflictColumns(columns...))
	return &SampleFileUpsertOne{
		create: sfc,
	}
}

type (
	// SampleFileUpsertOne is the builder for "upsert"-ing
	//  one SampleFile node.
	SampleFileUpsertOne struct {
		create *SampleFileCreate
	}

	// SampleFileUpsert is the "OnConflict" setter.
	SampleFileUpsert struct {
		*sql.UpdateSet
	}
)

// SetSha256 sets the "sha256" field.
func (u *SampleFileUpsert) SetSha256(v string) *SampleFileUpsert {
	u.Set(samplefile.FieldSha256, v)
	return u
}

// UpdateSha256 sets the "sha256" field to the value that was provided on create.
func (u *SampleFileUpsert) UpdateSha256() *SampleFileUpsert {
	u.SetExcluded(samplefile.FieldSha256)
	return u
}

// SetFormat sets the "format" field.
func (u *SampleFileUpsert) SetFormat(v string) *SampleFileUpsert {
	u.Set(samplefile.FieldFormat, v)
	return u
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *SampleFileUpsert) UpdateFormat() *SampleFileUpsert {
	u.SetExcluded(samplefile.FieldFormat)
	return u
}

// ClearFormat clears the value of the "format" field.
func (u *SampleFileUpsert) ClearFormat() *SampleFileUpsert {
	u.SetNull(samplefile.FieldFormat)
	return u
}

// SetLength sets the "length" field.
func (u *SampleFileUpsert) SetLength(v int64) *SampleFileUpsert {
	u.Set(samplefile.FieldLength, v)
	return u
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *SampleFileUpsert) UpdateLength() *SampleFileUpsert {
	u.SetExcluded(samplefile.FieldLength)
	return u
}

// AddLength adds v to the "length" field.
func (u *SampleFileUpsert) AddLength(v int64) *SampleFileUpsert {
	u.Add(samplefile.FieldLength, v)
	return u
}

// ClearLength clears the value of the "length" field.
func (u *SampleFileUpsert) ClearLength() *SampleFileUpsert {
	u.SetNull(samplefile.FieldLength)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SampleFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SampleFileUpsertOne) UpdateNewValues() *SampleFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SampleFile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SampleFileUpsertOne) Ignore() *SampleFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SampleFileUpsertOne) DoNothing() *SampleFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SampleFileCreate.OnConflict
// documentation for more info.
func (u *SampleFileUpsertOne) Update(set func(*SampleFileUpsert)) *SampleFileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SampleFileUpsert{UpdateSet: update})
	}))
	return u
}

// SetSha256 sets the "sha256" field.
func (u *SampleFileUpsertOne) SetSha256(v string) *SampleFileUpsertOne {
	return u.Update(func(s *SampleFileUpsert) {
		s.SetSha256(v)
	})
}

// UpdateSha256 sets the "sha256" field to the value that was provided on create.
func (u *SampleFileUpsertOne) UpdateSha256() *SampleFileUpsertOne {
	return u.Update(func(s *SampleFileUpsert) {
		s.UpdateSha256()
	})
}

// SetFormat sets the "format" field.
func (u *SampleFileUpsertOne) SetFormat(v string) *SampleFileUpsertOne {
	return u.Update(func(s *SampleFileUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *SampleFileUpsertOne) UpdateFormat() *SampleFileUpsertOne {
	return u.Update(func(s *SampleFileUpsert) {
		s.UpdateFormat()
	})
}

// ClearFormat clears the value of the "format" field.
func (u *SampleFileUpsertOne) ClearFormat() *SampleFileUpsertOne {
	return u.Update(func(s *SampleFileUpsert) {
		s.ClearFormat()
	})
}

// SetLength sets the "length" field.
func (u *SampleFileUpsertOne) SetLength(v int64) *SampleFileUpsertOne {
	return u.Update(func(s *SampleFileUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *SampleFileUpsertOne) AddLength(v int64) *SampleFileUpsertOne {
	return u.Update(func(s *SampleFileUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *SampleFileUpsertOne) UpdateLength() *SampleFileUpsertOne {
	return u.Update(func(s *SampleFileUpsert) {
		s.UpdateLength()
	})
}

// ClearLength clears the value of the "length" field.
func (u *SampleFileUpsertOne) ClearLength() *SampleFileUpsertOne {
	return u.Update(func(s *SampleFileUpsert) {
		s.ClearLength()
	})
}

// Exec executes the query.
func (u *SampleFileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("sierraent: missing options for SampleFileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SampleFileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SampleFileUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SampleFileUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SampleFileCreateBulk is the builder for creating many SampleFile entities in bulk.
type SampleFileCreateBulk struct {
	config
	err      error
	builders []*SampleFileCreate
	conflict []sql.ConflictOption
}

// Save creates the SampleFile entities in the database.
func (sfcb *SampleFileCreateBulk) Save(ctx context.Context) ([]*SampleFile, error) {
	if sfcb.err != nil {
		return nil, sfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sfcb.builders))
	nodes := make([]*SampleFile, len(sfcb.builders))
	mutators := make([]Mutator, len(sfcb.builders))
	for i := range sfcb.builders {
		func(i int, root context.Context) {
			builder := sfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SampleFileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sfcb *SampleFileCreateBulk) SaveX(ctx context.Context) []*SampleFile {
	v, err := sfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sfcb *SampleFileCreateBulk) Exec(ctx context.Context) error {
	_, err := sfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sfcb *SampleFileCreateBulk) ExecX(ctx context.Context) {
	if err := sfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SampleFile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SampleFileUpsert) {
//			SetSha256(v+v).
//		}).
//		Exec(ctx)
func (sfcb *SampleFileCreateBulk) OnConflict(opts ...sql.ConflictOption) *SampleFileUpsertBulk {
	sfcb.conflict = opts
	return &SampleFileUpsertBulk{
		create: sfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SampleFile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sfcb *SampleFileCreateBulk) OnConflictColumns(columns ...string) *SampleFileUpsertBulk {
	sfcb.conflict = append(sfcb.conflict, sql.ConflictColumns(columns...))
	return &SampleFileUpsertBulk{
		create: sfcb,
	}
}

// SampleFileUpsertBulk is the builder for "upsert"-ing
// a bulk of SampleFile nodes.
type SampleFileUpsertBulk struct {
	create *SampleFileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SampleFile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SampleFileUpsertBulk) UpdateNewValues() *SampleFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SampleFile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SampleFileUpsertBulk) Ignore() *SampleFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SampleFileUpsertBulk) DoNothing() *SampleFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SampleFileCreateBulk.OnConflict
// documentation for more info.
func (u *SampleFileUpsertBulk) Update(set func(*SampleFileUpsert)) *SampleFileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SampleFileUpsert{UpdateSet: update})
	}))
	return u
}

// SetSha256 sets the "sha256" field.
func (u *SampleFileUpsertBulk) SetSha256(v string) *SampleFileUpsertBulk {
	return u.Update(func(s *SampleFileUpsert) {
		s.SetSha256(v)
	})
}

// UpdateSha256 sets the "sha256" field to the value that was provided on create.
func (u *SampleFileUpsertBulk) UpdateSha256() *SampleFileUpsertBulk {
	return u.Update(func(s *SampleFileUpsert) {
		s.UpdateSha256()
	})
}

// SetFormat sets the "format" field.
func (u *SampleFileUpsertBulk) SetFormat(v string) *SampleFileUpsertBulk {
	return u.Update(func(s *SampleFileUpsert) {
		s.SetFormat(v)
	})
}

// UpdateFormat sets the "format" field to the value that was provided on create.
func (u *SampleFileUpsertBulk) UpdateFormat() *SampleFileUpsertBulk {
	return u.Update(func(s *SampleFileUpsert) {
		s.UpdateFormat()
	})
}

// ClearFormat clears the value of the "format" field.
func (u *SampleFileUpsertBulk) ClearFormat() *SampleFileUpsertBulk {
	return u.Update(func(s *SampleFileUpsert) {
		s.ClearFormat()
	})
}

// SetLength sets the "length" field.
func (u *SampleFileUpsertBulk) SetLength(v int64) *SampleFileUpsertBulk {
	return u.Update(func(s *SampleFileUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *SampleFileUpsertBulk) AddLength(v int64) *SampleFileUpsertBulk {
	return u.Update(func(s *SampleFileUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *SampleFileUpsertBulk) UpdateLength() *SampleFileUpsertBulk {
	return u.Update(func(s *SampleFileUpsert) {
		s.UpdateLength()
	})
}

// ClearLength clears the value of the "length" field.
func (u *SampleFileUpsertBulk) ClearLength() *SampleFileUpsertBulk {
	return u.Update(func(s *SampleFileUpsert) {
		s.ClearLength()
	})
}

// Exec executes the query.
func (u *SampleFileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("sierraent: OnConflict was set for builder %d. Set it on the SampleFileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("sierraent: missing options for SampleFileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SampleFileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
