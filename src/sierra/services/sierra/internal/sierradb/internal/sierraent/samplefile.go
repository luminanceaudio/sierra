// Code generated by ent, DO NOT EDIT.

package sierraent

import (
	"fmt"
	"sierra/services/sierra/internal/sierradb/internal/sierraent/samplefile"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SampleFile is the model entity for the SampleFile schema.
type SampleFile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Sha256 holds the value of the "sha256" field.
	Sha256 string `json:"sha256,omitempty"`
	// Format holds the value of the "format" field.
	Format string `json:"format,omitempty"`
	// Length holds the value of the "length" field.
	Length       int64 `json:"length,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SampleFile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case samplefile.FieldID, samplefile.FieldLength:
			values[i] = new(sql.NullInt64)
		case samplefile.FieldSha256, samplefile.FieldFormat:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SampleFile fields.
func (sf *SampleFile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case samplefile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sf.ID = int(value.Int64)
		case samplefile.FieldSha256:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sha256", values[i])
			} else if value.Valid {
				sf.Sha256 = value.String
			}
		case samplefile.FieldFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field format", values[i])
			} else if value.Valid {
				sf.Format = value.String
			}
		case samplefile.FieldLength:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field length", values[i])
			} else if value.Valid {
				sf.Length = value.Int64
			}
		default:
			sf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SampleFile.
// This includes values selected through modifiers, order, etc.
func (sf *SampleFile) Value(name string) (ent.Value, error) {
	return sf.selectValues.Get(name)
}

// Update returns a builder for updating this SampleFile.
// Note that you need to call SampleFile.Unwrap() before calling this method if this SampleFile
// was returned from a transaction, and the transaction was committed or rolled back.
func (sf *SampleFile) Update() *SampleFileUpdateOne {
	return NewSampleFileClient(sf.config).UpdateOne(sf)
}

// Unwrap unwraps the SampleFile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sf *SampleFile) Unwrap() *SampleFile {
	_tx, ok := sf.config.driver.(*txDriver)
	if !ok {
		panic("sierraent: SampleFile is not a transactional entity")
	}
	sf.config.driver = _tx.drv
	return sf
}

// String implements the fmt.Stringer.
func (sf *SampleFile) String() string {
	var builder strings.Builder
	builder.WriteString("SampleFile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sf.ID))
	builder.WriteString("sha256=")
	builder.WriteString(sf.Sha256)
	builder.WriteString(", ")
	builder.WriteString("format=")
	builder.WriteString(sf.Format)
	builder.WriteString(", ")
	builder.WriteString("length=")
	builder.WriteString(fmt.Sprintf("%v", sf.Length))
	builder.WriteByte(')')
	return builder.String()
}

// SampleFiles is a parsable slice of SampleFile.
type SampleFiles []*SampleFile
