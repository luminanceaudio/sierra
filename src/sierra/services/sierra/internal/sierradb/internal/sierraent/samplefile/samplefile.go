// Code generated by ent, DO NOT EDIT.

package samplefile

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the samplefile type in the database.
	Label = "sample_file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSha256 holds the string denoting the sha256 field in the database.
	FieldSha256 = "sha256"
	// FieldFormat holds the string denoting the format field in the database.
	FieldFormat = "format"
	// FieldLength holds the string denoting the length field in the database.
	FieldLength = "length"
	// Table holds the table name of the samplefile in the database.
	Table = "sample_files"
)

// Columns holds all SQL columns for samplefile fields.
var Columns = []string{
	FieldID,
	FieldSha256,
	FieldFormat,
	FieldLength,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SampleFile queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySha256 orders the results by the sha256 field.
func BySha256(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSha256, opts...).ToFunc()
}

// ByFormat orders the results by the format field.
func ByFormat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFormat, opts...).ToFunc()
}

// ByLength orders the results by the length field.
func ByLength(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLength, opts...).ToFunc()
}
