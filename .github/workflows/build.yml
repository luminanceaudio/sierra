name: Build/release

on: push

jobs:
  gogenerate:
    name: "Go generate check"
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Run go generate
        run: |
          go generate ./...

      - name: Check for uncommitted changes and untracked files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Go generate changed or created files that are not commited"
            git diff
            exit 1
          fi

  gosec:
    name: "Gosec Check"
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: ./...

  package:
    needs: [gogenerate, gosec]
    
    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: "1.22.3" # The Go version to download (if necessary) and use.

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 22
      
      - name: Determine version for package.json
        run: echo "SIERRA_VERSION=$(echo $GITHUB_REF | sed 's/refs\/tags\///')" >> $GITHUB_ENV

      - name: Package Electron app
        run: |
          cd src/electron
          npm run package
          
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release_binaries
          path: src/electron/release/build/Sierra-*
  
  release:
    needs: [package]
      
    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
    strategy:
      matrix:
        tag: [ true ]

    runs-on: "ubuntu-latest"
        
    steps:
      - name: "Determine tag"
        run: echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: release_binaries
          path: src/electron/release/build/
        
      - name: "Create release"
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });
            
              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

      